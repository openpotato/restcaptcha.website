{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"What is RESTCaptcha?","text":"<p>RESTCaptcha is an easy-to-integrate, privacy-friendly CAPTCHA solution that does not require users to solve image puzzles or maths problems.</p> <p>Instead, RESTCaptcha uses a proof-of-work mechanism to verify human interaction with your form.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Stateless challenge with an HMAC-signed nonce (a one-time-use string)</li> <li>Client-side proof-of-work puzzle (SHA-256, SHA-384, or SHA-512 hash below a defined threshold)</li> <li>CDN-ready <code>restcaptcha.min.js</code> script with a configurable API endpoint</li> <li>Easy to integrate with Node.js, PHP, ASP.NET Core, or any other server technology</li> <li>Fully customisable</li> <li>Supports four different modes (interactive, automatic, invisible, headless)</li> <li>Multilingual (currently: English, German, French, Italian, Portuguese, Spanish)</li> </ul>"},{"location":"#how-it-works","title":"How it works","text":"<p>If the term CAPTCHA doesn\u2019t mean much to you, have a look at the chapter What are CAPTCHAs? first.</p> <p>In simple terms, RESTCaptcha works as follows:</p> <ol> <li>You integrate the RESTCaptcha widget into your website \u2014 typically into a registration or contact form.</li> <li>The user visiting your website receives a token from the RESTCaptcha server (this happens transparently in the background). Their web browser must then solve a small computational task by clicking a checkbox (optionally, this can also happen without any click).</li> <li>Once the user has filled in the form, it is submitted to your server (the one hosting your website). The token and the puzzle solution are sent along with the form data.</li> <li>Before processing the submitted data, your server must verify the token and the puzzle solution by making an API request to the RESTCaptcha server. If verification succeeds, everything is fine; otherwise, your server should assume the request came from a bot.</li> </ol>"},{"location":"#live-demos","title":"Live demos","text":"<p>The following live demos are available:</p> <ul> <li> <p> PHP-Demo</p> <p>We have implemented a small website using PHP and Bootstrap 5 to demonstrate the use of RESTCaptcha.</p> <p> Visit the site</p> </li> <li> <p> ASP.NET-Demo</p> <p>We have built the same website using ASP.NET Core and Bootstrap 5.</p> <p> Visit the site</p> </li> </ul> <p>The source code for both demos is available in the RESTCaptcha GitHub repository.</p>"},{"location":"api/","title":"Server API","text":"<p>This reference documents the RESTCaptcha server API.</p>"},{"location":"api/#general","title":"General","text":"<p>The full URL for API requests depends on the configured domain of your RESTCaptcha installation.</p> <p>In this documentation, we\u2019ll assume the following example domain:</p> <pre><code>captcha.example.com\n</code></pre> <p>API errors are returned using RFC 9457 Problem Details.</p>"},{"location":"api/#captcha-api","title":"CAPTCHA API","text":""},{"location":"api/#requesting-a-challenge","title":"Requesting a challenge","text":"<p>Requests a new challenge.</p>"},{"location":"api/#request","title":"Request","text":"<pre><code>GET https://captcha.example.com/v1/challenge?siteKey={My-Site-Key}\n</code></pre> <p>Query parameters:</p> <code>siteKey</code> (string, required) <p>Public site key.</p>"},{"location":"api/#responses","title":"Responses","text":"<code>200 OK</code> (application/json) <p>Returns a JSON object containing the challenge information.</p> <p>Example:</p> <pre><code>{\n  \"challengeType\": {\n    \"type\": \"proofOfWork\",\n    \"algorithm\": \"hash-sha-256\",\n    \"difficulty\": 4\n  },\n  \"token\": \"2c8f4b2d-7ab6-4f3a-9c2a-2e6b3a1c9e8f\"\n}\n</code></pre> <p>Property descriptions:</p> <code>challengeType.type</code> <p>Challenge type \u2014 currently always <code>proofOfWork</code>.</p> <code>challengeType.algorithm</code> <p>The hash algorithm used:</p> Value Description <code>hash-sha-256</code> SHA-256\u2013based hash algorithm <code>hash-sha-384</code> SHA-384\u2013based hash algorithm <code>hash-sha-512</code> SHA-512\u2013based hash algorithm <code>challengeType.difficulty</code> <p>Difficulty level of the challenge.</p> <code>token</code> <p>A unique random string (nonce).</p> <p>Possible errors (application/problem+json):</p> <ul> <li><code>400 Bad Request</code></li> <li><code>404 Not Found</code></li> <li><code>500 Internal Server Error</code></li> </ul>"},{"location":"api/#example","title":"Example","text":"<pre><code>curl -sS \"https://captcha.example.com/v1/challenge?siteKey=&lt;My-Site-Key&gt;\" \\\n  -H \"Accept: application/json\"\n</code></pre>"},{"location":"api/#validating-a-solution","title":"Validating a solution","text":"<p>Validates the client-submitted solution for a given challenge.</p>"},{"location":"api/#request_1","title":"Request","text":"<pre><code>POST https://captcha.example.com/v1/verify?siteKey={My-Site-Key}\n</code></pre> <p>Query parameters:</p> <code>siteKey</code> (string, required) <p>Public site key.</p> <p>Request body (<code>application/json</code>):</p> <p>Example:</p> <pre><code>{\n  \"callerIp\": \"203.0.113.42\",\n  \"siteSecret\": \"&lt;My-Site-Secret&gt;\",\n  \"solution\": \"&lt;My-Challenge-Solution&gt;\",\n  \"token\": \"&lt;My-Challenge-Token&gt;\"\n}\n</code></pre> <p>Property descriptions:</p> <code>siteSecret</code> (string, required) <p>Website\u2019s secret key.</p> <code>solution</code> (string, required) <p>Client\u2019s computed challenge solution.</p> <code>token</code> (string, required) <p>Token (nonce) obtained from <code>/v1/challenge</code>.</p> <code>callerIp</code> (string, optional) <p>IP address of the requester (optional, useful for logging or rate-limiting).</p>"},{"location":"api/#responses_1","title":"Responses","text":"<code>200 OK</code> (application/json) <p>Returns a JSON object with verification status.</p> <p>Example:</p> <pre><code>{\n  \"hostName\": \"www.example.com\",\n  \"status\": \"success\"\n}\n</code></pre> <p>Property descriptions:</p> <code>hostName</code> <p>Hostname.</p> <code>status</code> <p>Verification result:</p> Value Description <code>success</code> Verification OK <code>invalid-token</code> Token is invalid <code>invalid-solution</code> Solution is invalid <p>Possible errors (application/problem+json):</p> <ul> <li><code>400 Bad Request</code></li> <li><code>401 Unauthorized</code></li> <li><code>404 Not Found</code></li> <li><code>500 Internal Server Error</code></li> </ul>"},{"location":"api/#example_1","title":"Example","text":"<pre><code>curl -sS \"https://captcha.example.com/v1/verify?siteKey=&lt;My-Site-Key&gt;\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n        \"callerIp\": \"203.0.113.42\",\n        \"siteSecret\": \"&lt;My-Site-Secret&gt;\",\n        \"solution\": \"&lt;My-Challenge-Solution&gt;\",\n        \"token\": \"&lt;My-Challenge-Token&gt;\"\n      }'\n</code></pre>"},{"location":"api/#resetting-a-challenge","title":"Resetting a challenge","text":"<p>Invalidates an existing token so that a new challenge can be started.</p>"},{"location":"api/#request_2","title":"Request","text":"<pre><code>POST https://captcha.example.com/v1/reset?siteKey={My-Site-Key}\n</code></pre> <p>Query parameters:</p> <code>siteKey</code> (string, required) <p>Public site key.</p> <p>Request body (<code>application/json</code>):</p> <p>Example:</p> <pre><code>{\n  \"token\": \"&lt;ChallengeToken&gt;\"\n}\n</code></pre> <p>Property descriptions:</p> <code>token</code> (string, required) <p>Token (nonce) obtained from <code>/v1/challenge</code>.</p>"},{"location":"api/#responses_2","title":"Responses","text":"<code>200 OK</code> (application/json) <p>No response body.</p> <p>Possible errors (application/problem+json):</p> <ul> <li><code>400 Bad Request</code></li> <li><code>404 Not Found</code></li> <li><code>500 Internal Server Error</code></li> </ul>"},{"location":"api/#example_2","title":"Example","text":"<pre><code>curl -sS \"https://captcha.example.com/v1/reset?siteKey=&lt;My-Site-Key&gt;\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{ \"token\": \"&lt;My-Challenge-Token&gt;\" }'\n</code></pre>"},{"location":"api/#health-api","title":"Health API","text":"<p>The Health API provides information about the operational status of the RESTCaptcha server.</p>"},{"location":"api/#request_3","title":"Request","text":"<pre><code>GET /health\n</code></pre> <p>The Health API can optionally be protected with an API key, which may be passed either as an <code>X-API-KEY</code> header or as an <code>Authorization</code> header.</p> <code>X-API-KEY</code> <p>Your API key in an <code>X-API-KEY</code> header.</p> <p>Example:</p> <pre><code>X-API-KEY: &lt;My-API-Key&gt;\n</code></pre> <code>Authorization</code> <p>Your API key in an <code>Authorization</code> header.</p> <p>Example:</p> <pre><code>Authorization: ApiKey &lt;My-API-Key&gt;\n</code></pre>"},{"location":"api/#responses_3","title":"Responses","text":"<code>200 OK</code> (application/json) <p>Returns a JSON object with status information.</p> <p>Example:</p> <pre><code>{\n  \"hostName\": \"example.com\",\n  \"status\": \"success\"\n}\n</code></pre>"},{"location":"api/#example_3","title":"Example","text":"<pre><code>curl -sS https://captcha.example.com/health \\\n  -H \"X-API-KEY: &lt;My-API-Key&gt;\" \\\n  -H \"Accept: application/json\"\n</code></pre>"},{"location":"captcha/","title":"What are CAPTCHAs?","text":"<p>CAPTCHAs (Completely Automated Public Turing tests to tell Computers and Humans Apart) are challenge\u2013response tests used on websites to distinguish real users from automated bots. They usually require the user to complete a task that is easy for humans but difficult for computer systems \u2014 for example, reading distorted text or identifying objects in images. The main goal is to prevent malicious software from abusing online services (e.g. submitting spam through forms, scraping data, or fraudulently creating accounts).</p>"},{"location":"captcha/#why-are-captchas-necessary","title":"Why are CAPTCHAs necessary?","text":"<p>The fundamental purpose of a CAPTCHA is to block automated abuse of online systems while allowing legitimate human users through. Without CAPTCHAs or similar human verification mechanisms, malicious bots could:</p> <ul> <li>Flood online forms, comments, and emails with spam or harmful links.</li> <li>Buy up tickets or products by automating purchases faster than real customers.</li> <li>Perform credential-stuffing or brute-force attacks on login pages.</li> <li>Mass-create accounts (for spam, fake reviews, or fraud) on platforms with free registration.</li> </ul> <p>CAPTCHAs create friction for these automated scripts. When users are required to interpret a distorted image or solve a puzzle, this can significantly slow down or deter bots, as they would need human-like perception to continue. CAPTCHAs therefore help ensure that only real people perform critical actions such as signing in or submitting a form.</p> <p>Importantly, CAPTCHAs are a blunt instrument and not a universal solution. They create friction for all users, and motivated attackers will always find ways around them. Nevertheless, CAPTCHAs remain an effective first line of defence to prevent opportunistic abuse by making automated attacks costly or impractical.</p>"},{"location":"captcha/#traditional-captcha-methods","title":"Traditional CAPTCHA methods","text":"<p>Early or \u201cclassic\u201d CAPTCHAs typically presented explicit puzzles that users had to solve. These traditional CAPTCHAs can be grouped into several common types:</p> <ul> <li> <p>Distorted text CAPTCHAs: The original standard CAPTCHA type showed an image containing text that was distorted, noisy, or warped, asking users to type in the displayed characters.</p> <p>The distortion exploited weaknesses in machine vision: humans could still recognise the letters despite interference, while computers (at least historically) struggled with segmentation and recognition. For example, the word \u201cklappsack\u201d might appear with irregular letters and noisy backgrounds that confuse OCR software.</p> <p>Early CAPTCHAs, such as those from Yahoo and Carnegie Mellon University, used this approach. Over time, they had to become more difficult (wavier text, busier backgrounds) as OCR algorithms improved. Around 2012, humans solved text CAPTCHAs with 90\u201395% accuracy in about 10 seconds, but success rates dropped as the puzzles became harder.</p> </li> <li> <p>Image-based CAPTCHAs: Instead of letters, some CAPTCHAs use images. Users must identify pictures that match a criterion, such as \u201cSelect all images with traffic lights\u201d or \u201cClick on all the cats.\u201d</p> <p>The idea is that object recognition is harder for AI than text recognition. Google\u2019s reCAPTCHA v2 (introduced in 2014) popularised the image grid with street signs, cars, and shopfronts, using Google\u2019s vast image databases.</p> <p>An earlier example was Microsoft\u2019s Asirra (2007), which displayed 12 pet photos and asked users to select all the cats. Asirra reported 99.6% human accuracy within 30 seconds and was perceived as more pleasant than deciphering text. Although discontinued in 2014, its approach lives on in modern image CAPTCHAs.</p> </li> <li> <p>Simple question or maths CAPTCHAs: Some websites use simple questions (e.g. \u201cWhat colour is the sky?\u201d) or arithmetic problems (\u201c3 + 5 = ?\u201d). These are easy for most humans to answer and are sometimes called MAPTCHAs (Math CAPTCHAs). Their security is weak, however, as bots with basic logic or OCR can solve them easily. They may be sufficient for low-risk or accessibility scenarios but are otherwise easy to bypass.</p> </li> <li> <p>Audio CAPTCHAs: To support visually impaired users, many CAPTCHA systems offer an audio alternative. Typically, a distorted sequence of numbers or letters is played over background noise, which the user must type in.</p> <p>In practice, audio CAPTCHAs are difficult for many people. Studies show that blind users succeed only about 45% of the time, with average completion times exceeding one minute.</p> <p>Ironically, researchers have found that software using signal processing and speech recognition can sometimes solve audio CAPTCHAs more easily than visual ones. Thus, while audio CAPTCHAs are important for accessibility, they also represent a weakness in both usability and security.</p> </li> <li> <p>CAPTCHA variants and games: There are dozens of other variants. Some use logic or quiz questions (\u201cAnswer a simple riddle\u201d), interactive games (dragging shapes, drawing patterns), or ask users to reproduce a geometric figure.</p> <p>Experimental CAPTCHAs included short games requiring users to identify moving objects. Microsoft\u2019s prototype PixelPlotter had users connect dots in an image.</p> <p>These are less common but demonstrate the wide range of human tasks that can serve as CAPTCHAs. The key idea is that the task should be easy for an average person but hard for automated scripts.</p> </li> </ul>"},{"location":"captcha/#alternatives-to-traditional-captchas","title":"Alternatives to traditional CAPTCHAs","text":"<p>Beyond the classic text or image puzzles, there are alternative approaches and services addressing the same bot-prevention problem. Some can be used alongside or instead of traditional CAPTCHAs:</p> <ul> <li> <p>Google reCAPTCHA (v2 and v3): Google\u2019s reCAPTCHA is the most widely used service.</p> <p>ReCAPTCHA v2 (2014) introduced the famous \u201cI\u2019m not a robot\u201d checkbox, which performs invisible background analyses (cookies, browser fingerprint, Google account activity, etc.) to estimate the likelihood of human behaviour. If confidence is low, it shows a classic image or audio puzzle. This sped up verification for most legitimate users (often just one click), hence Google\u2019s name \u201cNo CAPTCHA reCAPTCHA.\u201d</p> <p>Critics pointed out that its effectiveness depended heavily on Google account status \u2014 a Chrome user signed into Gmail often passed immediately, while a privacy-conscious Firefox user with tracking protection might face numerous image puzzles.</p> <p>ReCAPTCHA v3 (2018) is a fully invisible, score-based system. Website owners must interpret scores and decide actions themselves, which can be complex.</p> <p>Both versions are free up to a high volume, but Google later introduced a limit of 1 million monthly requests, with paid enterprise plans beyond that. This prompted major sites (e.g. Cloudflare) to seek alternatives due to cost and privacy concerns.</p> </li> <li> <p>hCaptcha: hCaptcha emerged around 2019\u20132020 as a privacy-friendly, revenue-sharing alternative to reCAPTCHA. The challenges are similar (image classification tasks), but a key difference is that hCaptcha pays website owners for users\u2019 image labelling work. Companies needing training data pay hCaptcha, which distributes the work through CAPTCHAs and shares revenue with site operators.</p> <p>Cloudflare switched from Google to hCaptcha in 2020, partly due to Google\u2019s pricing and to reduce tracking. Users often find hCaptcha challenges harder or less intuitive (e.g. less obvious objects), but the same rule applies: genuine users often see no challenge, while suspicious ones do.</p> <p>hCaptcha also offers an invisible mode and accessibility options (audio or logic puzzles).</p> </li> <li> <p>Cloudflare Turnstile: Introduced in 2022, Turnstile is a CAPTCHA-as-a-Service available even to non-Cloudflare customers. It runs background checks as soon as a user interacts with a protected page and only displays a small task (e.g. rotating an image) if needed.</p> <p>Turnstile emphasises privacy: all verification runs in the browser, and no personal data are stored on Cloudflare\u2019s servers. This ensures GDPR compliance, which is a major issue for Google\u2019s CAPTCHA. The challenges are quick and language-independent, such as orienting an image correctly.</p> <p>Some security researchers note that these tasks may be easier for bots, but Turnstile compensates with additional signals and updates.</p> </li> <li> <p>FriendlyCaptcha: FriendlyCaptcha takes a completely different approach: proof-of-work puzzles instead of human tasks. The user\u2019s browser must solve a small cryptographic puzzle (similar to Hashcash) when visiting a page. This runs in the background, and the user only sees a short loading indicator.</p> <p>For bots, large-scale computation becomes expensive; for humans, it\u2019s just a short delay. Users don\u2019t need to click or type anything, making it highly accessible and user-friendly. Suspicious users receive harder tasks, but still without interaction.</p> <p>FriendlyCaptcha collects no personal data, ensuring full GDPR compliance. The downside is that security relies on attackers lacking sufficient computing power, and very weak devices may experience minor slowdowns. Nevertheless, it\u2019s an attractive option as part of a layered defence.</p> </li> <li> <p>Device fingerprinting and reputation systems: Some services skip explicit puzzles altogether, using device/browser fingerprinting and IP reputation to detect bots.</p> <p>If a fingerprint matches a known headless browser, the request can be silently blocked or delayed. Often, this is combined with adaptive logic: known bad requests are challenged or blocked, while trusted users bypass CAPTCHAs entirely.</p> <p>Advantage: no user friction. Disadvantage: potential false positives (unusual but legitimate users) and the need for constant updates. Such methods are often used as part of layered systems like reCAPTCHA v3.</p> </li> <li> <p>Proof-of-work challenges: Beyond FriendlyCaptcha, proof-of-work has been proposed as a general access control method. Some websites require a small computational task (hashing) per request, implemented in JavaScript.</p> <p>Consumer websites rarely use this yet; it\u2019s more common for API rate limiting. The aim is to make mass requests costly.</p> <p>The downside: slower devices suffer, and attackers with high computing power can bypass it.</p> </li> <li> <p>Honeypot fields and time-based tests: A simple alternative is a honeypot field \u2014 an invisible form field that humans won\u2019t fill in but bots will. The server can then detect and block them.</p> <p>Similarly, timing can be measured: if a form is submitted within one second of loading, it was likely automated.</p> <p>These tests are simple and frictionless but only stop basic bots. Advanced attackers can easily avoid them.</p> </li> </ul>"},{"location":"captcha/#restcaptcha-in-context","title":"RESTCaptcha in context","text":"<p>RESTCaptcha combines proof-of-work challenges, timing analysis, and local device fingerprinting.</p> <p>To be clear: RESTCaptcha is not a revolutionary change in CAPTCHA architecture. Rather, our goal was to implement the following principles:</p> <ul> <li>An open-source solution that is fully configurable and can be self-hosted by anyone (digital sovereignty).</li> <li>A privacy-friendly, GDPR-compliant implementation \u2014 no collection of personal data.</li> <li>Simple integration into existing websites, with minimal coding effort.</li> <li>A pleasant and highly accessible user experience \u2014 no image puzzles, distorted text, or stressful maths questions to get wrong.</li> </ul>"},{"location":"change-log/","title":"Changelog","text":"<p>RESTCaptcha is open source on GitHub, where you can view the detailed commit history. This changelog provides a summarised overview of the main changes.</p> <p>We largely follow the recommendations from the community project Keep a Changelog.</p>"},{"location":"change-log/#010-_october-29-2025","title":"0.1.0 _October 29 , 2025","text":"<p>Initial release.</p>"},{"location":"community/","title":"Community","text":"<p>RESTCaptcha is open source. A project like this thrives on the people who use it. We welcome feedback and contributions of any kind:</p> <ul> <li>Create a question or report in the GitHub Issue Tracker.</li> <li>Start a discussion under GitHub Discussions.</li> <li>Submit a pull request.</li> </ul>"},{"location":"configuration/","title":"Configuration","text":"<p>In this chapter, we describe the configuration options available for the RESTCaptcha server.</p> <p>All configuration settings are stored in the JSON file <code>appsettings.Production.json</code>, which you created during installation.</p>"},{"location":"configuration/#restcaptcha","title":"RestCaptcha","text":"<p>All RESTCaptcha-specific configuration data is found under the <code>RestCaptcha</code> section.</p> <p>The following snippet shows the default values for <code>RestCaptcha</code>:</p> <pre><code>{\n  ...\n  \"RestCaptcha\": {\n    \"ChallengeType\": {\n      ...\n    },\n    \"HMACKey\": \"&lt;Generated value&gt;\",\n    \"NonceMaxTTL\": \"00:30:00\",\n    \"VerificationMinDelay\": \"00:00:02\",\n    \"HealthCheck\": {\n      ...\n    },\n    \"Sites\": [\n      ...\n    ]\n  }\n}\n</code></pre> <p>The properties have the following meanings:</p> <code>ChallengeType</code> <p>Configuration data for the challenge type returned when a form page requests one (see below). The challenge type defines what the user or the form page itself must do to generate a valid solution.</p> <code>HMACKey</code> <p>Secret key used for HMAC (Hash-based Message Authentication Code). The generated default value (if unspecified) is not cryptographically secure. Please use a secure random generator such as the 1Password Password Generator.</p> <code>NonceMaxTTL</code> <p>Maximum lifetime of the unique nonce. Default value: <code>\"00:30:00\"</code> (30 minutes).</p> <code>VerificationMinDelay</code> <p>Minimum delay between receiving the challenge request and performing server-side verification. Default value: <code>\"00:00:02\"</code> (2 seconds).</p> <code>HealthCheck</code> <p>Configuration data for the HealthCheck endpoint (see below).</p> <code>Sites</code> <p>Configuration data for the registered websites (see below).</p>"},{"location":"configuration/#restcaptchachallengetype","title":"RestCaptcha.ChallengeType","text":"<p>RESTCaptcha is designed to support multiple challenge types (currently, only one is implemented \ud83d\ude0a).</p> <code>type</code> <p>The challenge type returned when a form page requests one:</p> Value Description <code>proofOfWork</code> Proof of Work challenge"},{"location":"configuration/#proofofwork","title":"ProofOfWork","text":"<p>The following snippet shows the default values for the <code>proofOfWork</code> challenge type:</p> <pre><code>{\n  ...\n  \"RestCaptcha\": {\n    \"ChallengeType\": {\n      \"type\": \"proofOfWork\",\n      \"algorithm\": \"hash-sha-256\",\n      \"difficulty\": 4\n    },\n    ...\n  }\n}\n</code></pre> <p>The properties have the following meanings:</p> <code>algorithm</code> <p>The hash algorithm used for the proof-of-work challenge:</p> Value Description <code>hash-sha-256</code> SHA-256-based hash algorithm <code>hash-sha-384</code> SHA-384-based hash algorithm <code>hash-sha-512</code> SHA-512-based hash algorithm <code>difficulty</code> <p>Difficulty level of the challenge. Default value: <code>4</code>.</p>"},{"location":"configuration/#restcaptchahealthcheck","title":"RestCaptcha.HealthCheck","text":"<p>The RESTCaptcha server includes a HealthCheck endpoint that can optionally be protected by an API key. This endpoint returns system metrics indicating the operational state of the RESTCaptcha server.</p> <p>A typical response looks like this:</p> <pre><code>{\n  \"status\": \"pass\",\n  \"version\": \"0.0.1.20175\",\n  \"serviceId\": \"restcaptcha\",\n  \"checks\": {\n    \"uptime\": [\n      {\n        \"componentType\": \"system\",\n        \"observedValue\": 0,\n        \"observedUnit\": \"s\",\n        \"time\": \"2025-10-16T14:05:11.5262654+00:00\"\n      }\n    ]\n  }\n}\n</code></pre> <p>By default, the HealthCheck endpoint is publicly accessible, but it can be restricted or disabled at any time. The following configuration snippet shows the default values for <code>RestCaptcha.HealthCheck</code>:</p> <pre><code>{\n  ...\n  \"RestCaptcha\": {\n    \"HealthCheck\": {\n      \"Enabled\": true,\n      \"PrivateOnly\": false,\n      \"AllowLocal\": false,\n      \"AllowCidrs\": [],\n      \"Keys\": []\n    },\n    \"Sites\": [\n      ...\n    ]\n  }\n}\n</code></pre> <code>Enabled</code> <p>Boolean value controlling whether the endpoint is active.</p> Value Description <code>true</code> HealthCheck endpoint enabled <code>false</code> HealthCheck endpoint disabled <code>PrivateOnly</code> <p>Controls whether the endpoint is private. When enabled, only loopback addresses and networks listed in <code>AllowCidrs</code> are permitted. API keys are ignored, and public requests are denied.</p> Value Description <code>true</code> Private endpoint <code>false</code> Public endpoint <code>AllowLocal</code> <p>Determines whether requests from local loopback addresses are allowed. When running behind a proxy (e.g. nginx), ensure that forwarded headers are configured correctly so the actual client IP is passed through.</p> Value Description <code>true</code> Allow local loopback addresses <code>false</code> Block local loopback addresses <code>AllowCidrs</code> <p>A list of trusted network ranges in CIDR notation. If <code>PrivateOnly = false</code>, requests from these ranges are allowed without an API key. If <code>PrivateOnly = true</code>, only requests from these ranges (and loopback, if enabled) are permitted.</p> <code>Keys</code> <p>A list of valid API keys that can be used to authorise access to the HealthCheck endpoint.</p>"},{"location":"configuration/#restcaptchasites","title":"RestCaptcha.Sites","text":"<p>For websites to interact with the RESTCaptcha server, they must be registered. The following configuration snippet shows a typical registration:</p> <pre><code>{\n  ...\n  \"RestCaptcha\": {\n    ...\n    \"Sites\": [\n      {\n        \"name\": \"My Site\",\n        \"description\": \"For testing purposes only\",\n        \"siteKey\": \"My-Site-Key\",\n        \"siteSecret\": \"AeyGWx3kQeyrDFCE5KDR\",\n        \"validHostNames\": [\"www.example.com\"]\n      }\n    ]\n  }\n}\n</code></pre> <code>name</code> <p>Name of the registered website (for documentation purposes only).</p> <code>description</code> <p>Additional description of the registered website (for documentation purposes only).</p> <code>siteKey</code> <p>Key used to associate requests with the registered website.</p> <code>siteSecret</code> <p>Secret used to authorise requests for the registered website.</p> <code>validHostNames</code> <p>Optional list of valid domain names associated with the website. If specified, only requests originating from these domains will be accepted. When running behind a proxy (e.g. nginx), ensure that the original hostname is correctly forwarded.</p>"},{"location":"configuration/#serilog","title":"Serilog","text":"<p>The RESTCaptcha server uses the .NET library Serilog for logging. RESTCaptcha supports the following output sinks:</p> <ul> <li>Console output</li> </ul> <p>Example:</p> <pre><code>{\n  \"Serilog\": {\n    \"Using\": [\n      \"Serilog.Sinks.Console\"\n    ],\n    \"WriteTo\": [{ \"Name\": \"Console\" }]\n  }\n  ...\n}\n</code></pre> <ul> <li>File output</li> </ul> <p>Example:</p> <pre><code>{\n  \"Serilog\": {\n    \"Using\": [\n      \"Serilog.Sinks.File\"\n    ],\n    \"WriteTo\": [\n      {\n        \"Name\": \"File\",\n        \"Args\": {\n          \"path\": \"/var/log/restcaptcha/log-.txt\",\n          \"rollingInterval\": \"Day\",\n          \"retainedFileCountLimit\": 7,\n          \"fileSizeLimitBytes\": 10000000,\n          \"rollOnFileSizeLimit\": true\n        }\n      }\n    ]\n  }\n  ...\n}\n</code></pre> <ul> <li>OpenTelemetry output</li> </ul>"},{"location":"faq/","title":"Frequently Asked Questions (FAQ)","text":"<p>Is RESTCaptcha really free? Aren\u2019t there already other CAPTCHA solutions? In our FAQ you\u2019ll find answers to the most commonly asked questions about the RESTCaptcha project.</p>"},{"location":"faq/#can-i-use-restcaptcha-free-of-charge","title":"Can I use RESTCaptcha free of charge?","text":"<p>Yes. RESTCaptcha is open source, free to use, and permitted for commercial projects as well. RESTCaptcha is licensed under the AGPL.</p>"},{"location":"faq/#arent-there-already-a-thousand-other-captcha-solutions","title":"Aren\u2019t there already a thousand other CAPTCHA solutions?","text":"<p>Not literally thousands, but yes \u2014 there are quite a few. However, they differ significantly in important ways:</p> <ul> <li> <p>Well-known options such as Google reCAPTCHA are free to use but not (fully) open source. You\u2019ll need to balance functionality and data protection, and accept a degree of vendor dependency.</p> </li> <li> <p>Some open-source solutions are only partly open source, i.e. a \u201ccore\u201d edition intended to whet the appetite for a fuller SaaS offering. That doesn\u2019t necessarily mean the core edition is a bad choice.</p> </li> <li> <p>Others are fully open source, but still rooted in the old world of image puzzles and distorted text.</p> </li> </ul> <p>If you\u2019re looking for a modern CAPTCHA you can run yourself, that\u2019s completely open source, requires no dependencies such as a database, and you happen to have a soft spot for the .NET open-source platform, RESTCaptcha is well worth a look.</p>"},{"location":"faq/#what-exactly-does-running-it-yourself-mean","title":"What exactly does \u201crunning it yourself\u201d mean?","text":"<p>Running a solution like RESTCaptcha yourself (self-hosting) means that, as the administrator, you install, configure, and operate RESTCaptcha on a server of your choice. You retain full control over your CAPTCHA service. All information on installing, configuring, and integrating RESTCaptcha can be found on this website.</p> <p>If you still feel you need a helping hand, just ask us at <code>openpotato@stueber.de</code>. We don\u2019t bite \ud83d\ude42</p>"},{"location":"faq/#ive-found-a-bug","title":"I\u2019ve found a bug!","text":"<p>Please let us know \u2014 ideally via the GitHub issue tracker.</p>"},{"location":"faq/#i-want-to-contribute","title":"I want to contribute!","text":"<p>Got an idea for an improvement? We\u2019d love to hear it \u2014 the best place is a discussion on GitHub.</p> <p>Even better, have you fixed a bug or implemented an enhancement? Brilliant \u2014 we\u2019re looking forward to your pull request on GitHub.</p>"},{"location":"faq/#any-other-questions","title":"Any other questions?","text":"<p>You can contact us at any time. Use the GitHub issue tracker. Prefer email? No problem \u2014 write to us at <code>openpotato@stueber.de</code>.</p>"},{"location":"integration/","title":"Integration","text":"<p>Integrating RESTCaptcha into a website is quite straightforward. This guide assumes the following environment:</p> <ul> <li>The RESTCaptcha server is installed and accessible at <code>https://captcha.example.com</code>.</li> <li>Your website has a backend capable of handling form submissions via <code>POST</code>.</li> </ul> <p>We\u2019ll now go through the following steps:</p> <ol> <li>Insert the RESTCaptcha JS script into your website.</li> <li>Add and configure an empty container element to host the widget.</li> <li>Receive and verify the challenge solution on your backend using the RESTCaptcha server.</li> </ol>"},{"location":"integration/#adding-the-script","title":"Adding the script","text":"<p>Add the widget script to either the <code>&lt;head&gt;</code> section or the end of the <code>&lt;body&gt;</code> of your website:</p> <pre><code>&lt;script src=\"https://captcha.example.com/restcaptcha.min.js\"&gt;&lt;/script&gt;\n</code></pre> <p>The script automatically searches for HTML elements with <code>id=\"restcaptcha-widget\"</code> (except in headless mode; see below) and initialises the RESTCaptcha widget.</p>"},{"location":"integration/#adding-the-container-element","title":"Adding the container element","text":"<p>Insert an empty HTML element on your form page. This element will be used by the RESTCaptcha JS script to render the widget. You need to include the following key attributes:</p> <ul> <li><code>id</code> \u2014 identifies the RESTCaptcha widget (default: <code>restcaptcha-widget</code>)</li> <li><code>data-api-baseurl</code> \u2014 specifies the location of your RESTCaptcha server</li> <li><code>data-sitekey</code> \u2014 defines your authentication key</li> <li><code>data-widget-mode</code> \u2014 sets the display mode (default: <code>interactive</code>)</li> </ul> <p>Example:</p> <pre><code>&lt;div \n  id=\"restcaptcha-widget\"\n  data-api-baseurl=\"https://captcha.example.com/v1/\"\n  data-sitekey=\"&lt;MY_SITE_KEY&gt;\"\n  data-widget-mode=\"interactive\"&gt;\n  ...\n&lt;/div&gt;\n</code></pre> <p>Once the challenge is solved (either interactively or automatically), the RESTCaptcha script inserts two hidden <code>&lt;input&gt;</code> fields into your form: one containing the challenge solution, and another containing a cryptographically signed token.</p> <p>When the user submits the form, these fields are automatically included in the submission.</p> <p>Here\u2019s a minimal but complete example of a web page with an integrated RESTCaptcha widget:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;head&gt;\n  &lt;script async defer src=\"https://captcha.example.com/restcaptcha.min.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;form id=\"login-form\" method=\"POST\" action=\"submit\"&gt;\n    &lt;label for=\"username\"&gt;Username&lt;/label&gt;\n    &lt;input id=\"username\" name=\"username\" required&gt;\n    &lt;label for=\"password\"&gt;Password&lt;/label&gt;\n    &lt;input id=\"password\" type=\"password\" name=\"password\" required&gt;\n    &lt;div\n      id=\"restcaptcha-widget\"\n      data-api-baseurl=\"https://captcha.example.com/v1/\"\n      data-sitekey=\"YOUR_SITE_KEY\"\n      data-widget-mode=\"interactive\"\n      data-callback-solved=\"onCaptchaSolved\"\n      data-callback-reset=\"onCaptchaReset\"&gt;\n    &lt;/div&gt;\n    &lt;button id=\"loginButton\" type=\"submit\" disabled&gt;Login&lt;/button&gt;\n  &lt;/form&gt;\n  &lt;script&gt;\n    function onCaptchaSolved(token, solution) {\n      // Called when the user has successfully solved the challenge\n      document.getElementById('loginButton').disabled = false;\n    }\n    function onCaptchaReset() {\n      // Called when the CAPTCHA status is reset\n      document.getElementById('loginButton').disabled = true;\n    }\n  &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>What happens here?</p> <ol> <li> <p>The RESTCaptcha widget is automatically rendered.</p> </li> <li> <p>When the challenge starts (e.g. after a user click), it takes a few moments to compute the solution.</p> </li> <li> <p>Once solved, two additional hidden form fields are added:</p> </li> <li> <p><code>captcha-token</code></p> </li> <li> <p><code>captcha-solution</code></p> </li> <li> <p>These two values are then verified on the server side (see next section).</p> </li> </ol>"},{"location":"integration/#server-side-verification","title":"Server-side verification","text":"<p>The verification process on the server follows this general pattern:</p> <ol> <li>The form is submitted to your backend and includes the fields <code>captcha-token</code> and <code>captcha-solution</code>.</li> <li>Your backend calls the RESTCaptcha API, authenticating with your <code>YOUR_SITE_KEY</code> and <code>YOUR_SITE_SECRET</code> to verify the token and solution.</li> <li>Only if verification succeeds should the backend proceed with processing the form data.</li> </ol> <p>Here\u2019s a minimal PHP example:</p> <pre><code>&lt;?php\n// POST values from the form\n$token    = $_POST['captcha-token']    ?? '';\n$solution = $_POST['captcha-solution'] ?? '';\n\n// Configuration\n$siteKey    = 'YOUR_SITE_KEY';\n$siteSecret = 'YOUR_SITE_SECRET';\n\n// Optional (for logging/rate limits)\n$callerIp = $_SERVER['REMOTE_ADDR'] ?? '';\n\n// Prepare request payload\n$payload = [\n  'siteSecret' =&gt; $siteSecret,\n  'solution'   =&gt; $solution,\n  'token'      =&gt; $token,\n  'callerIp'   =&gt; $callerIp\n];\n\n// Initialise cURL request\n$ch = curl_init('https://captcha.example.com/v1/verify?siteKey=' . urlencode($siteKey));\ncurl_setopt_array($ch, [\n    CURLOPT_RETURNTRANSFER =&gt; true,\n    CURLOPT_POST           =&gt; true,\n    CURLOPT_HTTPHEADER     =&gt; ['Content-Type: application/json'],\n    CURLOPT_POSTFIELDS     =&gt; json_encode($payload),\n    CURLOPT_TIMEOUT        =&gt; 10,\n]);\n\n$response = curl_exec($ch);\n$httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n$error    = curl_error($ch);\ncurl_close($ch);\n\n// Handle errors\nif ($error) {\n    die(\"Connection error during CAPTCHA verification: $error\");\n}\n\n// Parse response\n$data = json_decode($response, true);\n\n// Success if HTTP 200 and status == \"success\"\n$isVerified = ($httpCode === 200 &amp;&amp; isset($data['status']) &amp;&amp; $data['status'] === 'success');\n\nif ($isVerified) {\n  // OK \u2192 proceed with form processing\n} else {\n  // Verification failed \u2192 show error message\n}\n?&gt;\n</code></pre> <p>Important</p> <p>The siteSecret must only ever be stored on your server. Never expose it in the browser or client-side code!</p>"},{"location":"integration/#additional-resources","title":"Additional resources","text":"<p>For server-side integration, official client libraries are also available for PHP and .NET:</p> <ul> <li>openpotato/restcaptcha-client.net: Official RESTCaptcha API .NET client library.</li> <li>openpotato/restcaptcha-client.php: Official RESTCaptcha API PHP client library.</li> </ul>"},{"location":"integration/#examples","title":"Examples","text":"<p>The source code for both live demos (PHP-based and ASP.NET-based) can also serve as a helpful reference You can find them in the RESTCaptcha GitHub repository.</p>"},{"location":"libraries/","title":"Client Libraries","text":"<p>The RESTCaptcha API for verifying tokens and challenge solutions can be accessed directly via HTTP/HTTPS requests. However, where available, using a client library is the more elegant option.</p> <p>The following libraries are available:</p>"},{"location":"libraries/#net","title":".NET","text":"<ul> <li>openpotato/restcaptcha-client.net: Official RESTCaptcha API .NET client library.</li> </ul>"},{"location":"libraries/#php","title":"PHP","text":"<ul> <li>openpotato/restcaptcha-client.php: Official RESTCaptcha API PHP client library.</li> </ul>"},{"location":"security/","title":"Additional measures","text":"<p>A CAPTCHA solution \u2014 whichever one you choose \u2014 can only ever be one element of your website\u2019s overall security strategy and should always be combined with additional protective measures.</p> <p>Here are a few suggestions:</p> <ul> <li> <p>Content Security Policy (CSP): A modern browser security feature that lets you specify which types of content (scripts, styles, images, iFrames, etc.) are allowed to load and execute on your website.</p> <p>Goal: Prevent cross-site scripting (XSS) and data injection attacks.</p> </li> <li> <p>Rate limiting: A mechanism that ensures a client (e.g. a user, browser, or bot) cannot send too many requests to your server in a short period of time.</p> <p>Goal: Prevent denial-of-service (DoS) attacks.</p> </li> <li> <p>(Dynamic) IP blacklisting: A feature that allows you to block specific IP addresses or address ranges to prevent them from accessing your server. Tools such as Fail2Ban can manage these lists dynamically by blocking IPs only when they exhibit suspicious behaviour (for example, multiple failed login attempts within a short time).</p> <p>Goal: Block clients with suspicious behaviour patterns.</p> </li> <li> <p>TLS hardening: Beyond the obvious requirement that your website must be accessible via HTTPS, you should also ensure that only TLS 1.2 and TLS 1.3 are offered, and that outdated or insecure cryptographic algorithms are disabled.</p> <p>Goal: Ensure secure encryption of communication.</p> </li> <li> <p>HTTP Strict Transport Security (HSTS): A mechanism that forces browsers to connect to your website exclusively via HTTPS, never via insecure HTTP.</p> <p>Goal: Protection against man-in-the-middle attacks.</p> </li> </ul>"},{"location":"ubuntu/","title":"On Ubuntu","text":"<p>In this chapter, we\u2019ll demonstrate how to install RESTCaptcha on Ubuntu Server 24.04 LTS using nginx as a reverse proxy.</p>"},{"location":"ubuntu/#installing-nginx","title":"Installing nginx","text":"<p>Check whether nginx is already installed:</p> <pre><code>nginx -v\n</code></pre> <p>If the result looks like this, you\u2019re all set and can proceed to the next section, \u201cInstalling ASP.NET\u201d:</p> <pre><code>nginx version: nginx/1.28.0\n</code></pre> <p>If instead you see <code>Command 'nginx' not found</code>, you need to install nginx:</p> <pre><code>sudo apt update &amp;&amp; sudo apt install nginx\n</code></pre> <p>To start nginx, enter the following:</p> <pre><code>sudo systemctl start nginx\n</code></pre> <p>To enable automatic startup when your server boots:</p> <pre><code>sudo systemctl enable nginx\n</code></pre> <p>Then test whether you can access nginx\u2019s default webpage locally:</p> <pre><code>wget -S --spider localhost\n</code></pre> <p>nginx default website</p> <p>The nginx default site is not required for RESTCaptcha. You can\u2014and should\u2014disable it:</p> <pre><code>sudo unlink /etc/nginx/sites-enabled/default\nsudo systemctl reload nginx\n</code></pre>"},{"location":"ubuntu/#installing-aspnet","title":"Installing ASP.NET","text":"<p>RESTCaptcha requires the ASP.NET framework as a dependency.</p> <p>The installation of ASP.NET Core 9 is described in detail in the Microsoft documentation. Here\u2019s the short version:</p> <p>First, add the package repository:</p> <pre><code>sudo add-apt-repository ppa:dotnet/backports\n</code></pre> <p>Then install the ASP.NET Core runtime:</p> <pre><code>sudo apt-get update &amp;&amp; sudo apt-get install -y apt-transport-https \nsudo apt-get update &amp;&amp; sudo apt-get install -y aspnetcore-runtime-9.0\n</code></pre>"},{"location":"ubuntu/#installing-restcaptcha","title":"Installing RESTCaptcha","text":""},{"location":"ubuntu/#copying-the-binaries","title":"Copying the binaries","text":"<p>Create a new directory for RESTCaptcha (e.g. <code>/usr/share/restcaptcha</code>) and copy the binaries from the latest release into it.</p> <p>The following Bash one-liner will do this for you:</p> <pre><code>curl -sL -H \"User-Agent: curl\" https://api.github.com/repos/openpotato/restcaptcha/releases/latest | jq -r '.assets[] | select(.name | endswith(\".zip\")) | .browser_download_url' | head -n1 | xargs -I{} bash -c 'tmp=$(mktemp /tmp/restcaptcha.XXXX.zip); curl -L -H \"User-Agent: curl\" -o \"$tmp\" \"{}\"; sudo mkdir -p /usr/share/restcaptcha; sudo unzip -o \"$tmp\" -d /usr/share/restcaptcha; rm \"$tmp\"'\n</code></pre> <p>Now configure ownership and access permissions for the directory:</p> <pre><code>sudo chown -R nginx:nginx /usr/share/restcaptcha\nsudo chmod -R u=rwX,g=rX,o= /usr/share/restcaptcha\n</code></pre> <p>Create a new file <code>/usr/share/restcaptcha/appsettings.Production.json</code>:</p> <pre><code>{\n  \"Serilog\": {\n    \"Using\": [\n      \"Serilog.Sinks.Console\",\n      \"Serilog.Sinks.File\"\n    ],\n    \"MinimumLevel\": {\n      \"Default\": \"Information\",\n      \"Override\": {\n        \"Microsoft.AspNetCore\": \"Warning\",\n        \"Microsoft.AspNetCore.Hosting.Diagnostics\": \"Warning\",\n        \"Microsoft.AspNetCore.HttpLogging.HttpLoggingMiddleware\": \"Information\"\n      }\n    },\n    \"WriteTo\": [\n      { \"Name\": \"Console\" },\n      {\n        \"Name\": \"File\",\n        \"Args\": {\n          \"path\": \"/var/log/restcaptcha/log-.txt\",\n          \"rollingInterval\": \"Day\",\n          \"retainedFileCountLimit\": 14,\n          \"fileSizeLimitBytes\": 10000000,\n          \"rollOnFileSizeLimit\": true\n        }\n      }\n    ]\n  },\n  \"RestCaptcha\": {\n    \"Sites\": [\n      {\n        \"name\": \"My Site\",\n        \"description\": \"My site using RESTCaptcha\",\n        \"siteKey\": \"My-Site-Key\",\n        \"siteSecret\": \"AeyGWx3kQeyrDFCE5KDR\",\n        \"validHostNames\": []\n      }\n    ]\n  }\n}\n</code></pre> <p>Next, create a systemd service file for the API web service:</p> <pre><code>sudo nano /etc/systemd/system/restcaptcha.service\n</code></pre> <p>Insert the following content:</p> <pre><code>[Unit]\nDescription=RESTCaptcha Web Service\n\n[Service]\nWorkingDirectory=/usr/share/restcaptcha\nExecStart=/usr/bin/dotnet RestCaptcha.WebService.dll\nRestart=always\n# Restart service after 10 seconds if the dotnet service crashes:\nRestartSec=10\nKillSignal=SIGINT\nSyslogIdentifier=restcaptcha\nUser=nginx\nEnvironment=ASPNETCORE_ENVIRONMENT=Production\nEnvironment=DOTNET_PRINT_TELEMETRY_MESSAGE=false\nEnvironment=ASPNETCORE_URLS=http://localhost:5030\n\n[Install]\nWantedBy=multi-user.target\n</code></pre> <p>Then start the API web service:</p> <pre><code>sudo systemctl daemon-reload\nsudo systemctl enable restcaptcha.service\nsudo systemctl start restcaptcha.service\n</code></pre> <p>Verify that it\u2019s running successfully:</p> <pre><code>sudo systemctl status restcaptcha.service\n</code></pre>"},{"location":"ubuntu/#nginx-as-a-reverse-proxy","title":"Nginx as a reverse proxy","text":"<p>Create a new nginx configuration file and add the following content:</p> <pre><code>server {\n    server_name  localhost;\n    listen       127.0.0.1:8080;\n    listen       [::1]:8080;\n    root         /usr/share/restcaptcha.webservice;\n\n    # Proxy request to Kestrel\n    location / {\n        proxy_pass         http://127.0.0.1:5030;\n        proxy_http_version 1.1;\n        proxy_set_header   Upgrade $http_upgrade;\n        proxy_set_header   Connection keep-alive;\n        proxy_set_header   Host $host;\n        proxy_cache_bypass $http_upgrade;\n        proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header   X-Forwarded-Proto $scheme;\n    }\n\n    # Redirect server error pages to the static page /50x.html\n    error_page 500 502 504 /50x.html;\n    location = /50x.html {\n        root /usr/share/nginx/html;\n    }\n}\n\nserver {\n    server_name  captcha.example.com;\n    listen       443 ssl; \n    root         /usr/share/restcaptcha.webservice;\n\n    # Proxy request to Kestrel\n    location / {\n        proxy_pass         http://127.0.0.1:5030;\n        proxy_http_version 1.1;\n        proxy_set_header   Upgrade $http_upgrade;\n        proxy_set_header   Connection keep-alive;\n        proxy_set_header   Host $host;\n        proxy_cache_bypass $http_upgrade;\n        proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header   X-Forwarded-Proto $scheme;\n    }\n\n    # Redirect server error pages to the static page /50x.html\n    error_page 500 502 504 /50x.html;\n    location = /50x.html {\n        root /usr/share/nginx/html;\n    }\n\n    # Enable HTTP/2 protocol\n    http2 on;\n}\n</code></pre> <p>Restart nginx:</p> <pre><code>sudo systemctl restart nginx\n</code></pre> <p>You can now test the RESTCaptcha health endpoint locally:</p> <pre><code>Invoke-WebRequest -Uri \"http://localhost:8080/health\" -UseBasicParsing\n</code></pre> <p>For public access, you\u2019ll still need a TLS certificate for your HTTPS binding. A good option is to use Let\u2019s Encrypt to generate free TLS certificates.</p> <p>To do so, install an ACME client. One of the best for Linux is Certbot. Install and run Certbot; once you\u2019ve answered all questions, it will communicate with Let\u2019s Encrypt, request a TLS certificate for the domain <code>captcha.example.com</code>, and automatically update your nginx configuration.</p> <p>A test in your web browser at <code>https://captcha.example.com/health</code> should now succeed.</p>"},{"location":"widget/","title":"Widget","text":"<p>This reference documents all important public classes, properties, and methods, as well as the available HTML attributes (<code>data-*</code>) and events of the <code>restcaptcha.js</code> library.</p>"},{"location":"widget/#overview","title":"Overview","text":"<p>The RESTCaptcha JavaScript library provides the code required for client-side integration of RESTCaptcha into your own websites.</p> <p>It comes in two variants:</p> <ul> <li><code>restcaptcha.js</code>: The original, readable version.</li> <li><code>restcaptcha.min.js</code>: A minified version with all unnecessary characters removed to reduce file size and improve browser load times.</li> </ul> <p>The library consists of two main components:</p> <ol> <li> <p><code>HeadlessRestCaptcha</code>: A pure JavaScript client without a user interface (headless). It communicates directly with the RESTCaptcha API, solves the cryptographic challenge, and returns the result via events or callbacks. This variant is suitable for integrating with your own UIs or framework solutions.</p> </li> <li> <p><code>RestCaptcha</code>: A visual widget built on top of the headless client that automatically renders a simple user interface in the browser. It can be freely configured via HTML attributes, and supports multiple languages and modes (interactive, automatic, or invisible).</p> </li> </ol>"},{"location":"widget/#headlessrestcaptcha","title":"HeadlessRestCaptcha","text":"<p>A UI-less client that communicates directly with the RESTCaptcha API, solves a proof-of-work, and is driven via events (callbacks).</p>"},{"location":"widget/#constructor","title":"Constructor","text":"<pre><code>new HeadlessRestCaptcha(apiBaseUrl, siteKey, language)\n</code></pre> <p>Parameters:</p> <code>apiBaseUrl</code> <p>Base URL of the RESTCaptcha backend (required)</p> <code>siteKey</code> <p>The RESTCaptcha site key (required)</p> <code>language</code> <p>Language code (e.g. <code>\"en\"</code>). Auto-detected if empty.</p>"},{"location":"widget/#properties","title":"Properties","text":"<code>HeadlessRestCaptcha.language</code> <p>Effective language code.</p>"},{"location":"widget/#events","title":"Events","text":"<code>HeadlessRestCaptcha.onStarted</code> <p>Function invoked when solving starts.</p> <code>HeadlessRestCaptcha.onSolved</code> <p>Function invoked when the CAPTCHA has been solved successfully.</p> <code>HeadlessRestCaptcha.onFailed</code> <p>Function invoked on failures (e.g. invalid token, too many attempts).</p> <code>HeadlessRestCaptcha.onError</code> <p>Function invoked on unexpected errors.</p> <code>HeadlessRestCaptcha.onReset</code> <p>Function invoked after a reset.</p>"},{"location":"widget/#methods","title":"Methods","text":"<code>HeadlessRestCaptcha.solve()</code> <p>Starts backend communication, retrieves a challenge, solves the proof-of-work (SHA-256/384/512), and on success calls <code>onSolved(token, solution)</code>.</p> <code>HeadlessRestCaptcha.reset(token)</code> <p>Invalidates a previously obtained token.</p> <code>HeadlessRestCaptcha.isHeadless()</code> <p>Checks whether the calling browser is most likely headless or automated.</p>"},{"location":"widget/#restcaptcha","title":"RestCaptcha","text":"<p>The visible CAPTCHA widget that automatically renders HTML and interacts with the integrated headless client.</p>"},{"location":"widget/#constructor_1","title":"Constructor","text":"<pre><code>new RestCaptcha(widgetId = \"restcaptcha-widget\")\n</code></pre> <p>Parameter:</p> <code>widgetId</code> <p>The ID of the widget in the browser DOM (required)</p>"},{"location":"widget/#restcaptchaproblemdetails","title":"RestCaptchaProblemDetails","text":"<p>Implements the RFC 9457 Problem Details standard for structured API errors. Extends JavaScript\u2019s <code>Error</code> class.</p>"},{"location":"widget/#constructor_2","title":"Constructor","text":"<pre><code>new RestCaptchaProblemDetails({\n  type = 'about:blank',\n  title = 'Unknown error',\n  status = 0,\n  detail = null,\n  instance = null,\n  traceId = null,\n  errors = null\n} = {})\n</code></pre> <p>The parameter is an anonymous object with the corresponding properties (see the next section, \u201cProperties\u201d).</p>"},{"location":"widget/#properties_1","title":"Properties","text":"<code>RestCaptchaProblemDetails.type</code> <p>URI describing the error type.</p> <code>RestCaptchaProblemDetails.title</code> <p>Short, human-readable summary.</p> <code>RestCaptchaProblemDetails.status</code> <p>HTTP status code.</p> <code>RestCaptchaProblemDetails.detail</code> <p>Detailed error description.</p> <code>RestCaptchaProblemDetails.instance</code> <p>URI identifying this error occurrence.</p> <code>RestCaptchaProblemDetails.traceId</code> <p>Server-side diagnostic ID.</p> <code>RestCaptchaProblemDetails.errors</code> <p>Field-level validation errors (optional).</p>"},{"location":"widget/#instance-methods","title":"Instance methods","text":"<code>RestCaptchaProblemDetails.toString()</code> <p>Returns the error as <code>[Status] Title: Detail</code>.</p>"},{"location":"widget/#static-methods","title":"Static methods","text":"<code>RestCaptchaProblemDetails.fromResponse(response, json)</code> <p>Creates a <code>RestCaptchaProblemDetails</code> instance from a <code>fetch()</code> response and its JSON body.</p>"},{"location":"widget/#widget-data-attributes","title":"Widget <code>data-*</code> attributes","text":"<p>These HTML attributes control the widget\u2019s behaviour and appearance.</p>"},{"location":"widget/#basic-configuration","title":"Basic configuration","text":"<code>data-api-baseurl</code> <p>Base URL of the RESTCaptcha API (required)</p> <code>data-sitekey</code> <p>Public site key (required)</p> <code>data-widget-language</code> <p>Language code (<code>de</code>, <code>en</code>, <code>es</code>, <code>fr</code>, <code>it</code>, <code>pt</code>). By default, the script attempts to detect the language from the browser, falling back to <code>en</code>.</p> <code>data-widget-mode</code> <p>Mode. Possible values are <code>interactive</code> (default), <code>auto</code>, or <code>invisible</code>.</p>"},{"location":"widget/#callback-attributes","title":"Callback attributes","text":"<code>data-callback-started</code> &gt; <code>() =&gt; void</code> <p>Callback after the challenge has started on the client.</p> <code>data-callback-solved</code>  &gt; <code>(token, solution) =&gt; void</code> <p>Callback after a successful verification has been reported.</p> <code>data-callback-failed</code> &gt; <code>(message) =&gt; void</code> <p>Callback after an invalid verification has been reported.</p> <code>data-callback-error</code> &gt; <code>(error) =&gt; void</code> <p>Callback after an API error has been reported.</p> <code>data-callback-reset</code> &gt; <code>(token) =&gt; void</code> <p>Callback after the reset link has been clicked.</p> <p>Example:</p> <pre><code>&lt;script&gt;\n  function onCaptchaSolved(token, solution) {\n    console.log(\"Solved:\", token, solution);\n  }\n&lt;/script&gt;\n\n&lt;div id=\"restcaptcha-widget\"\n     data-api-baseurl=\"https://captcha.example.com/v1/\"\n     data-sitekey=\"&lt;My-Site-Key&gt;\"\n     data-widget-language=\"en\"\n     data-callback-solved=\"onCaptchaSolved\"&gt;\n&lt;/div&gt;\n</code></pre>"},{"location":"widget/#css-class-attributes","title":"CSS class attributes","text":"<p>The widget allows full control over CSS classes via <code>data-widget-css-*</code> attributes.</p> <p>Some attributes are specific to certain visual states (e.g. <code>data-widget-css-interactive</code>), while others are used across all states (e.g. <code>data-widget-css-footer</code>). In combination with the HTML nodes\u2019 <code>id</code> values, this provides maximum flexibility.</p> <p>Example for Bootstrap 5:</p> <pre><code>&lt;div \n  id=\"restcaptcha-widget\" \n  data-api-baseurl=\"https://captcha.example.com/v1/\"\n  data-sitekey=\"&lt;My-Site-Key&gt;\"\n  data-widget-language=\"en\"\n  data-widget-mode=\"interactive\" \n  data-widget-css-interactive=\"alert alert-light\"\n  data-widget-css-interactive-body=\"form-check\"\n  data-widget-css-interactive-checkbox=\"form-check-input\"\n  data-widget-css-interactive-checklabel=\"form-check-label\"\n  data-widget-css-solving=\"alert alert-light\"\n  data-widget-css-solving-body=\"d-flex align-items-center\"\n  data-widget-css-solving-animation=\"spinner-border spinner-border-sm me-3\"\n  data-widget-css-solved=\"alert alert-success\"\n  data-widget-css-solved-body=\"d-flex align-items-center\"\n  data-widget-css-solved-icon=\"me-2\"\n  data-widget-css-solved-text=\"fw-bold\"\n  data-widget-css-failed=\"alert alert-warning\"\n  data-widget-css-failed-body=\"d-flex align-items-center\"\n  data-widget-css-failed-icon=\"me-2\"\n  data-widget-css-error=\"alert alert-danger\"\n  data-widget-css-error-body=\"d-flex align-items-center\"\n  data-widget-css-error-icon=\"me-2\"\n  data-widget-css-footer=\"d-flex justify-content-end align-items-center mt-3 mb-1 gap-2\"\n  data-widget-css-links=\"d-flex gap-2\"\n  data-widget-css-link-external=\"link-secondary link-offset-1\"\n  data-widget-css-link-reset=\"link-offset-1\"\n&gt;\n&lt;/div&gt;\n</code></pre> <p>Below are all five possible RESTCaptcha visual states in abstract form.</p> <p>UI for the interactive mode:</p> <pre><code>&lt;div id=\"${widgetId}-interactive\" class=\"${data-widget-css-interactive}\" role=\"alert\"&gt;\n    &lt;div id=\"${widgetId}-interactive-body\" class=\"${data-widget-css-interactiveBody}\"&gt;\n        &lt;input id=\"${widgetId}-interactive-checkbox\" type=\"checkbox\" class=\"${data-widget-css-interactiveCheckBox}\"&gt;\n        &lt;label id=\"${widgetId}-interactive-checklabel\" for=\"${widgetId}-interactive-checkbox\" class=\"${data-widget-css-interactiveCheckLabel}\"&gt;\n            // Text\n        &lt;/label&gt;\n    &lt;/div&gt;  \n    &lt;div id=\"${widgetId}-footer\" class=\"${data-widget-css-footer}\"&gt;\n        &lt;div id=\"${widgetId}-logo\" class=\"${data-widget-css-logo}\" role=\"img\" aria-hidden=\"true\"&gt;\n            // RESTCaptcha Logo\n        &lt;/div&gt;\n        &lt;small id=\"${widgetId}-links\" class=\"${data-widget-css-links}\"&gt;\n            // External Links\n        &lt;/small&gt;\n    &lt;/div&gt;\n&lt;/div&gt;\n</code></pre> <p>UI for the solving state:</p> <pre><code>&lt;div id=\"${widgetId}-solving\" class=\"${data-widget-css-solving}\" role=\"alert\"&gt;\n    &lt;div id=\"${widgetId}-solving-body\" class=\"${data-widget-css-solvingBody}\"&gt;\n        &lt;div id=\"${widgetId}-solving-animation\" class=\"${data-widget-css-solvingAnimation}\" role=\"status\" aria-hidden=\"true\"&gt;&lt;/div&gt;\n        &lt;div id=\"${widgetId}-solving-text\" class=\"${data-widget-css-solvingText}\"&gt;\n            // Text\n        &lt;/div&gt;\n    &lt;/div&gt;\n    &lt;div id=\"${widgetId}-footer\" class=\"${data-widget-css-footer}\"&gt;\n        &lt;div id=\"${widgetId}-logo\" class=\"${data-widget-css-logo}\" role=\"img\" aria-hidden=\"true\"&gt;\n            // RESTCaptcha Logo\n        &lt;/div&gt;\n        &lt;small id=\"${widgetId}-links\" class=\"${data-widget-css-links}\"&gt;\n            // External Links\n        &lt;/small&gt;\n    &lt;/div&gt;\n&lt;/div&gt;\n</code></pre> <p>UI for a successfully validated challenge:</p> <pre><code>&lt;div id=\"${widgetId}-success\" class=\"${data-widget-css-solved}\" role=\"alert\"&gt;\n    &lt;div id=\"${widgetId}-success-body\" class=\"${data-widget-css-solvedBody}\"&gt;\n        &lt;div id=\"${widgetId}-success-icon\" class=\"${data-widget-css-solvedIcon}\"&gt;\n            // Icon\n        &lt;/div&gt;\n        &lt;div id=\"${widgetId}-success-text\" class=\"${data-widget-css-solvedText}\"&gt;\n            // Text\n        &lt;/div&gt;\n    &lt;/div&gt;\n    &lt;div id=\"${widgetId}-footer\" class=\"${data-widget-css-footer}\"&gt;\n        &lt;div id=\"${widgetId}-logo\" class=\"${data-widget-css-logo}\" role=\"img\" aria-hidden=\"true\"&gt;\n            // RESTCaptcha Logo\n        &lt;/div&gt;\n        &lt;small id=\"${widgetId}-links\" class=\"${data-widget-css-links}\"&gt;\n            // External Links\n        &lt;/small&gt;\n    &lt;/div&gt;\n&lt;/div&gt;\n</code></pre> <p>UI for a failed challenge:</p> <pre><code>&lt;div id=\"${widgetId}-failed\" class=\"${data-widget-css-failed}\" role=\"alert\"&gt;\n    &lt;div id=\"${widgetId}-failed-body\" class=\"${data-widget-css-failedBody}\"&gt;\n        &lt;div id=\"${widgetId}-failed-icon\" class=\"${data-widget-css-failedIcon}\"&gt;\n            // Icon\n        &lt;/div&gt;\n        &lt;div id=\"${widgetId}-failed-text\" class=\"${data-widget-css-failedText}\"&gt;\n            // Error message\n        &lt;/div&gt;\n    &lt;/div&gt;\n    &lt;div id=\"${widgetId}-footer\" class=\"${data-widget-css-footer}\"&gt;\n        &lt;div id=\"${widgetId}-logo\" class=\"${data-widget-css-logo}\" role=\"img\" aria-hidden=\"true\"&gt;\n            // RESTCaptcha Logo\n        &lt;/div&gt;\n        &lt;small id=\"${widgetId}-links\" class=\"${data-widget-css-links}\"&gt;\n            // External Links\n        &lt;/small&gt;\n    &lt;/div&gt;\n&lt;/div&gt;\n</code></pre> <p>UI for API errors:</p> <pre><code>&lt;div id=\"${widgetId}-error\" class=\"${data-widget-css-error}\" role=\"alert\"&gt;\n    &lt;div id=\"${widgetId}-error-body\" class=\"${data-widget-css-errorBody}\"&gt;\n        &lt;div id=\"${widgetId}-error-icon\" class=\"${data-widget-css-errorIcon}\"&gt;\n            // Icon\n        &lt;/div&gt;\n        &lt;div id=\"restcaptcha-error-text\" class=\"${data-widget-css-errorText}\"&gt;\n            // Error message\n        &lt;/div&gt;\n    &lt;/div&gt;\n    &lt;div id=\"${widgetId}-footer\" class=\"${data-widget-css-footer}\"&gt;\n        &lt;div id=\"${widgetId}-logo\" class=\"${data-widget-css-logo}\" role=\"img\" aria-hidden=\"true\"&gt;\n            // RESTCaptcha Logo\n        &lt;/div&gt;\n        &lt;small id=\"${widgetId}-links\" class=\"${data-widget-css-links}\"&gt;\n            // External Links\n        &lt;/small&gt;\n    &lt;/div&gt;\n&lt;/div&gt;\n</code></pre>"},{"location":"widget/#external-links","title":"External links","text":"<p>You can display up to eight additional links, e.g. to privacy or legal information.</p> <p>Example:</p> <pre><code>&lt;div id=\"restcaptcha-widget\"\n  data-widget-external-link1-href=\"https://www.example.com/restcaptcha\"\n  data-widget-external-link1-text=\"About RESTCaptcha\"\n  data-widget-external-link2-href=\"https://www.example.com/privacy\"\n  data-widget-external-link2-text=\"Privacy\"&gt;\n&lt;/div&gt;\n</code></pre>"},{"location":"widget/#events-callbacks","title":"Events &amp; callbacks","text":"<p>There are two approaches to handling events: programmatic (headless) or declarative (via HTML attributes).</p> <p>Programmatic:</p> <pre><code>const h = new HeadlessRestCaptcha(api, siteKey, 'de');\n\nh.onStarted = () =&gt; console.log(\"Started\");\nh.onSolved = (token, solution) =&gt; console.log(\"Solved:\", token, solution);\nh.onFailed = msg =&gt; alert(msg);\nh.onError = e =&gt; console.error(e);\nh.onReset = () =&gt; console.log(\"Reset\");\n\nh.solve();\n</code></pre> <p>Declarative:</p> <pre><code>&lt;script&gt;\n  function captchaStarted() { console.log(\"Started\"); }\n  function captchaSolved(token, solution) { console.log(\"Solved:\", token, solution); }\n  function captchaFailed(msg) { alert(msg); }\n&lt;/script&gt;\n\n&lt;div id=\"restcaptcha-widget\"\n  data-api-baseurl=\"https://captcha.example.com/v1/\"\n  data-sitekey=\"&lt;My-Site-Key&gt;\"\n  data-callback-started=\"captchaStarted\"\n  data-callback-solved=\"captchaSolved\"\n  data-callback-failed=\"captchaFailed\"&gt;\n  ...\n&lt;/div&gt;\n</code></pre>"},{"location":"widget/#automatic-initialisation","title":"Automatic initialisation","text":"<p>On document load (<code>DOMContentLoaded</code>), the script automatically looks for an element with the ID <code>restcaptcha-widget</code> and initialises it with:</p> <pre><code>new RestCaptcha(\"restcaptcha-widget\");\n</code></pre> <p>If the element is missing, nothing further happens.</p>"},{"location":"windows/","title":"On Windows","text":"<p>In this chapter, we\u2019ll demonstrate how to install RESTCaptcha on Windows Server 2025 using IIS 10 as the hosting environment. All steps are performed using PowerShell.</p>"},{"location":"windows/#installing-iis","title":"Installing IIS","text":"<p>Open PowerShell as an administrator and check whether IIS 10 is already installed:</p> <pre><code>Get-WindowsFeature -Name Web-Server, Web-Scripting-Tools\n</code></pre> <p>If the result looks like this, you\u2019re good to go and can proceed straight to the next section, \u201cInstalling ASP.NET\u201d:</p> <pre><code>Display Name                                            Name                       Install State\n------------                                            ----                       -------------\n[X] Web Server (IIS)                                    Web-Server                     Installed\n        [X] IIS Management Scripts and Tools            Web-Scripting-Tools            Installed\n</code></pre> <p>If one of these components is missing, install the Windows features manually:</p> <pre><code>Install-WindowsFeature -Name Web-Server, Web-Scripting-Tools\n</code></pre> <p>Then check whether you can access the IIS 10 default website locally:</p> <pre><code>Invoke-WebRequest -Uri \"http://localhost\" -UseBasicParsing\n</code></pre> <p>IIS default website</p> <p>The default IIS 10 website is not required for RESTCaptcha. You can\u2014and should\u2014disable it:</p> <pre><code>Import-Module WebAdministration\nStop-Website -Name \"Default Web Site\"\nSet-ItemProperty \"IIS:\\Sites\\Default Web Site\" serverAutoStart False\n</code></pre>"},{"location":"windows/#installing-aspnet","title":"Installing ASP.NET","text":"<p>RESTCaptcha requires the ASP.NET framework as a dependency.</p> <p>Open PowerShell as an administrator and run the following command to install the ASP.NET Core 9.0 Runtime \u2013 Windows Hosting Bundle:</p> <pre><code>winget install --id=Microsoft.DotNet.HostingBundle.9 -e --accept-package-agreements --accept-source-agreements\n</code></pre>"},{"location":"windows/#installing-restcaptcha","title":"Installing RESTCaptcha","text":""},{"location":"windows/#copying-the-binaries","title":"Copying the binaries","text":"<p>Create a new folder for RESTCaptcha (for example, <code>C:\\Sites\\RestCaptcha</code>) and copy the binaries from the latest release into it. The following PowerShell one-liner does this automatically:</p> <pre><code>$r=Invoke-RestMethod \"https://api.github.com/repos/openpotato/restcaptcha/releases/latest\" -Headers @{ \"User-Agent\"=\"PS\" };$a=$r.assets|?{ $_.name -like \"*.zip\"}|select -f 1;$zip=\"$env:TEMP\\$($a.name)\";Invoke-WebRequest $a.browser_download_url -OutFile $zip -Headers @{ \"User-Agent\"=\"PS\" };Expand-Archive $zip -DestinationPath \"C:\\Sites\\RestCaptcha\" -Force;Remove-Item $zip\n</code></pre> <p>Copy the <code>appsettings.json</code> file within this folder and rename it to <code>appsettings.Production.json</code>:</p> <pre><code>Copy-Item C:\\Sites\\RestCaptcha\\appsettings.json C:\\Sites\\RestCaptcha\\appsettings.Production.json\n</code></pre> <p>Modify the contents of <code>appsettings.Production.json</code> as follows:</p> <pre><code>{\n  \"Serilog\": {\n    \"Using\": [\n      \"Serilog.Sinks.Console\",\n      \"Serilog.Sinks.File\"\n    ],\n    \"MinimumLevel\": {\n      \"Default\": \"Information\",\n      \"Override\": {\n        \"Microsoft.AspNetCore\": \"Warning\",\n        \"Microsoft.AspNetCore.Hosting.Diagnostics\": \"Warning\",\n        \"Microsoft.AspNetCore.HttpLogging.HttpLoggingMiddleware\": \"Information\"\n      }\n    },\n    \"WriteTo\": [\n      { \"Name\": \"Console\" },\n      {\n        \"Name\": \"File\",\n        \"Args\": {\n          \"path\": \"c:\\\\Sites\\\\RestCaptcha\\\\logs\\\\log-.txt\",\n          \"rollingInterval\": \"Day\",\n          \"retainedFileCountLimit\": 7,\n          \"fileSizeLimitBytes\": 10000000,\n          \"rollOnFileSizeLimit\": true\n        }\n      }\n    ]\n  },\n  \"RestCaptcha\": {\n    \"Sites\": [\n      {\n        \"name\": \"My Site\",\n        \"description\": \"My site using RESTCaptcha\",\n        \"siteKey\": \"My-Site-Key\",\n        \"siteSecret\": \"AeyGWx3kQeyrDFCE5KDR\",\n        \"validHostNames\": []\n      }\n    ]\n  }\n}\n</code></pre>"},{"location":"windows/#creating-a-new-iis-site","title":"Creating a new IIS site","text":"<p>First, load the IIS Management Module into your PowerShell session:</p> <pre><code>Import-Module WebAdministration\n</code></pre> <p>Next, create a dedicated IIS App Pool for the ASP.NET service and configure it:</p> <pre><code>New-WebAppPool -Name \"AspNetCorePool\"\nSet-ItemProperty \"IIS:\\AppPools\\AspNetCorePool\" -Name managedRuntimeVersion -Value \"\"\nSet-ItemProperty \"IIS:\\AppPools\\AspNetCorePool\" -Name enable32BitAppOnWin64 -Value False\n</code></pre> <p>Now create a new IIS Site pointing to your RESTCaptcha folder <code>C:\\Sites\\RestCaptcha</code>:</p> <pre><code>New-Item \"IIS:\\Sites\\RestCaptcha\" `\n   -bindings @(\n     @{protocol=\"http\";  bindingInformation=\"*:8080:\"},\n     @{protocol=\"https\"; bindingInformation=\"*:443:captcha.example.com\"}\n   ) `\n   -physicalPath \"C:\\Sites\\RestCaptcha\"\nSet-ItemProperty \"IIS:\\Sites\\RestCaptcha\" -Name applicationPool -Value \"AspNetCorePool\"\n</code></pre> <p>You now have two bindings: a local HTTP binding on port 8080 and a public HTTPS binding on port 443.</p> <p>In the folder <code>C:\\Sites\\RestCaptcha</code>, create a new file named <code>web.config</code> and insert the following XML:</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n&lt;configuration&gt;\n  &lt;system.webServer&gt;\n    &lt;handlers&gt;\n      &lt;add name=\"aspNetCore\" path=\"*\" verb=\"*\" modules=\"AspNetCoreModuleV2\" resourceType=\"Unspecified\" /&gt;\n    &lt;/handlers&gt;\n    &lt;aspNetCore processPath=\"dotnet\"\n                arguments=\".\\RestCaptcha.WebService.dll\"\n                stdoutLogEnabled=\"false\"\n                stdoutLogFile=\".\\logs\\stdout\"\n                hostingModel=\"inprocess\"&gt;\n      &lt;environmentVariables&gt;\n        &lt;environmentVariable name=\"ASPNETCORE_ENVIRONMENT\" value=\"Production\" /&gt;\n      &lt;/environmentVariables&gt;\n    &lt;/aspNetCore&gt;\n  &lt;/system.webServer&gt;\n&lt;/configuration&gt;\n</code></pre> <p>The web.config file configures RESTCaptcha as an ASP.NET application, defining how incoming requests are handled. In this case, RESTCaptcha runs within the IIS worker process (in-process hosting model).</p> <p>That completes the basic configuration. Restart your IIS site:</p> <pre><code>Restart-WebAppPool \"AspNetCorePool\"; \nRestart-WebItem \"IIS:\\Sites\\RestCaptcha\"\n</code></pre> <p>You can now test the RESTCaptcha health endpoint locally:</p> <pre><code>Invoke-WebRequest -Uri \"http://localhost:8080/health\" -UseBasicParsing\n</code></pre> <p>For public access, you still need a TLS certificate for your HTTPS binding. A good option is to use Let\u2019s Encrypt to generate free TLS certificates.</p> <p>To do this, install an ACME client. One of the best for Windows is simple-acme. Install and run the command-line tool \u2014 once you\u2019ve answered the prompts, simple-acme will communicate with Let\u2019s Encrypt, request a TLS certificate for the domain <code>captcha.example.com</code>, and configure it automatically.</p> <p>A test in your web browser at <code>https://captcha.example.com/health</code> should now work successfully.</p>"}]}