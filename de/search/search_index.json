{"config":{"lang":["de"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Was ist RESTCaptcha?","text":"<p>RESTCaptcha ist eine einfach zu integrierende, datenschutzfreundliche CAPTCHA-L\u00f6sung, die vom Nutzer keine Bildr\u00e4tsel oder Mathematikaufgaben abverlangt.</p> <p>Stattdessen verwendet RESTCaptcha einen Proof-of-Work-Mechanismus, um die menschliche Interaktion mit Deinem Formular zu \u00fcberpr\u00fcfen.</p> <p>Funktionen:</p> <ul> <li>Zustandslose Herausforderung (challenge) mit HMAC-signiertem Nonce (Zeichenfolge zur einmaligen Verwendung)</li> <li>Clientseitiges Proof-of-Work-R\u00e4tsel (SHA-256-, SHA-384- oder SHA-512-Hash unterhalb eines Schwellenwerts)</li> <li>CDN-f\u00e4higes restcaptcha.min.js-Skript mit konfigurierbarem API-Endpunkt</li> <li>Einfach integrierbar mit Node.js, PHP, ASP.NET Core oder jeder anderen Servertechnologie</li> <li>Beliebig anpassbar</li> <li>Unterst\u00fctzt vier verschiedene Modi (interaktiv, automatisch, unsichtbar, headless)</li> <li>Multilingual (zurzeit: Englisch, Deutsch, Franz\u00f6sisch, Italienisch, Portugiesisch, Spanisch)</li> <li>Entwickelt mit .NET 9 und JavaScript.</li> </ul>"},{"location":"#funktionsweise","title":"Funktionsweise","text":"<p>Wer beim Begriff CAPTCHA nur Bahnhof versteht, der sollte sich zun\u00e4chst das Kapitel Was sind CAPTCHAs? durchlesen.</p> <p>RESTCaptcha funktioniert ganz grob wie folgt:</p> <ol> <li> <p>Du integrierst das RESTCaptcha-Widget in Deine Webseite \u2014 klassischerweise ein Registrierungs- oder Kontaktformular.</p> </li> <li> <p>Der Benutzer Deiner Webseite bekommt vom RESTCaptcha-Server ein Token zugesendet (das geschieht transparent im Hintergrund) und muss seinen Webbrowser eine Aufgabe l\u00f6sen lassen, in dem er auf ein Kontrollfeld klickt (geht optional auch ohne Klicken).</p> </li> <li> <p>Wenn der Benutzer Deiner Webseite das Formular ausgef\u00fcllt hat, sendet er die Daten an Deinen Server (also jenen, der Deine Webseite bereitstellt). Dabei wird auch der Token und die L\u00f6sung der Aufgabe mitgesendet.</p> </li> <li> <p>Dein Server muss jetzt, bevor er die Formulardaten weiterverarbeitet, den Token und die L\u00f6sung der Aufgabe durch einen API-Aufruf beim RESTCaptcha-Server verifizieren lassen. Ist die Verifizierung erfolgreich, ist alles ok, andernfalls muss Dein Server davon ausgehen, dass es sich um einen Bot handelt.</p> </li> </ol>"},{"location":"#live-demos","title":"Live-Demos","text":"<p>Die folgenden Live-Demos stehen bereit:</p> <ul> <li> <p> PHP-Demo</p> <p>Wir haben eine kleine Webseite mit PHP und Bootstrap 5 implementiert, die den Einsatz von RESTCaptcha demonstriert.</p> <p> Zur Webseite </p> </li> <li> <p> ASP.NET-Demo</p> <p>Wir haben die gleiche Webseite mit ASP.NET Core und Bootstrap 5 implementiert.</p> <p> Zur Webseite </p> </li> </ul> <p>Die Quellcodes f\u00fcr beide Demos befinden sich im GitHub-Repository von RESTCaptcha.</p>"},{"location":"api/","title":"Server-API","text":"<p>Diese Referenz dokumentiert die Server-API von RESTCaptcha.</p>"},{"location":"api/#allgemein","title":"Allgemein","text":"<p>Die vollst\u00e4ndige URL der API-Aufruffe ergibt sich aus der konfigurierten Dom\u00e4ne Deines Servers, auf dem RESTCaptcha installiert ist. </p> <p>In dieser Dokumentation gehen wir beispielhaft von folgender Dom\u00e4ne aus:</p> <pre><code>captcha.beispiel.de\n</code></pre> <p>API-Fehler werden als RFC 9457 Problem Details zur\u00fcckgegeben.</p>"},{"location":"api/#captcha-api","title":"CAPTCHA-API","text":""},{"location":"api/#challenge-anfordern","title":"Challenge anfordern","text":"<p>Fordert eine neue Challenge an.</p>"},{"location":"api/#request","title":"Request","text":"<pre><code>GET https://captcha.beispiel.de/v1/challenge?siteKey={Mein-Site-Schl\u00fcssel}\n</code></pre> <p>Die Query-Parameter bedeuten:</p> <code>siteKey</code> (string, required) <p>\u00d6ffentlicher Site-Schl\u00fcssel</p>"},{"location":"api/#responses","title":"Responses","text":"<code>200 OK</code> (application/json) <p>Liefert ein JSON-Objekt mit Informationen zur Challenge zur\u00fcck.  </p> <p>Beispiel:</p> <pre><code>{\n  \"challengeType\": {\n    \"type\": \"proofOfWork\",\n    \"algorithm\": \"hash-sha-256\",\n    \"difficulty\": 4\n  },\n  \"token\": \"2c8f4b2d-7ab6-4f3a-9c2a-2e6b3a1c9e8f\"\n}\n</code></pre> <p>Die Eigenschaften bedeuten:</p> <code>challengeType.type</code>: <p>Challenge-Typ, im Moment immer <code>proofOfWork</code></p> <code>challengeType.algorithm</code>: <p>Der zu nutzende Hash-Algorithmus:</p> Wert Beschreibung <code>hash-sha-256</code> SHA 256-basierter Hash-Algorithmus <code>hash-sha-384</code> SHA 384-basierter Hash-Algorithmus <code>hash-sha-512</code> SHA 512-basierter Hash-Algorithmus <code>challengeType.difficulty</code>: <p>Schwierigkeitsgrad der Challenge</p> <code>token</code> <p>Eine eindeutige, zuf\u00e4llige Zeichenfolge (Nonce).</p> <p>M\u00f6gliche Fehler (application/problem+json)</p> <ul> <li><code>400 Bad Request</code></li> <li><code>404 Not Found</code></li> <li><code>500 Internal Server Error</code></li> </ul>"},{"location":"api/#beispiel","title":"Beispiel","text":"<pre><code>curl -sS \"https://captcha.beispiel.de/v1/challenge?siteKey=&lt;Mein-Site-Schl\u00fcssel&gt;\" \\\n  -H \"Accept: application/json\"\n</code></pre>"},{"location":"api/#losung-validieren","title":"L\u00f6sung validieren","text":"<p>Validiert die vom Client \u00fcbermittelte L\u00f6sung zu einer Challenge.</p>"},{"location":"api/#request_1","title":"Request","text":"<pre><code>POST https://captcha.beispiel.de/v1/verify?siteKey={Mein-Site-Schl\u00fcssel}\n</code></pre> <p>Die Query-Parameter bedeuten:</p> <code>siteKey</code> (string, required) <p>\u00d6ffentlicher Site-Schl\u00fcssel</p> <p>Der Request-Body (<code>application/json</code>)</p> <p>Beispiel:</p> <pre><code>{\n  \"callerIp\": \"203.0.113.42\",\n  \"siteSecret\": \"&lt;Mein-Site-Secret&gt;\",\n  \"solution\": \"&lt;Meine-Challenge-L\u00f6sung&gt;\",\n  \"token\": \"&lt;Mein-Challenge-Token&gt;\"\n}\n</code></pre> <p>Die Eigenschaften bedeuten:</p> <code>siteSecret</code> (string, required) <p>Geheimer Schl\u00fcssel der Website</p> <code>solution</code> (string, required) <p>Gel\u00f6ste Antwort des Clients</p> <code>token</code> (string, required) <p>Token (Nonce) aus <code>/v1/challenge</code></p> <code>callerIp</code> (string, optional) <p>IP des Anfragenden (falls relevant)</p>"},{"location":"api/#responses_1","title":"Responses","text":"<code>200 OK</code> (application/json) <p>Liefert ein JSON-Objekt mit Statusinformationen zur Verifikation zur\u00fcck.  </p> <p>Beispiel:</p> <pre><code>{\n  \"hostName\": \"www.beispiel.de\",\n  \"status\": \"success\"\n}\n</code></pre> <p>Die Eigenschaften bedeuten:</p> <code>hostName</code>: <p>Hostname</p> <code>status</code> <p>Das Ergebnis der Verifikation:</p> Wert Bedeutung <code>success</code> Alles OK <code>invalid-token</code> Der Token ist ung\u00fcltig <code>invalid-solution</code> Die L\u00f6sung ist ung\u00fcltig <p>M\u00f6gliche Fehler (application/problem+json)</p> <ul> <li><code>400 Bad Request</code></li> <li><code>401 Unauthorized</code></li> <li><code>404 Not Found</code></li> <li><code>500 Internal Server Error</code></li> </ul>"},{"location":"api/#beispiel_1","title":"Beispiel","text":"<pre><code>curl -sS \"https://captcha.beispiel.de/v1/verify?siteKey=&lt;Mein-Site-Schl\u00fcssel&gt;\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n        \"callerIp\": \"203.0.113.42\",\n        \"siteSecret\": \"&lt;Mein-Site-Secret&gt;\",\n        \"solution\": \"&lt;Meine-Challenge-L\u00f6sung&gt;\",\n        \"token\": \"&lt;Mein-Challenge-Token&gt;\"\n      }'\n</code></pre>"},{"location":"api/#challenge-zurucksetzen","title":"Challenge zur\u00fccksetzen","text":"<p>Macht ein bestehendes Token ung\u00fcltig, damit eine Challenge neu gestartet werden kann.</p>"},{"location":"api/#request_2","title":"Request","text":"<pre><code>POST https://captcha.beispiel.de/v1/reset?siteKey={Mein-Site-Schl\u00fcssel}\n</code></pre> <p>Die Query-Parameter bedeuten:</p> <code>siteKey</code> (string, required) <p>\u00d6ffentlicher Site-Schl\u00fcssel</p> <p>Der Request-Body (<code>application/json</code>)</p> <p>Beispiel:</p> <pre><code>{\n  \"token\": \"&lt;ChallengeToken&gt;\"\n}\n</code></pre> <p>Die Eigenschaften bedeuten:</p> <code>token</code> (string, required) <p>Token (Nonce) aus <code>/v1/challenge</code></p>"},{"location":"api/#responses_2","title":"Responses","text":"<code>200 OK</code> (application/json) <p>Kein Reponse-Body.  </p> <p>M\u00f6gliche Fehler (application/problem+json)</p> <ul> <li><code>400 Bad Request</code></li> <li><code>404 Not Found</code></li> <li><code>500 Internal Server Error</code></li> </ul>"},{"location":"api/#beispiel_2","title":"Beispiel","text":"<pre><code>curl -sS \"https://captcha.beispiel.de/v1/reset?siteKey=&lt;Mein-Site-Schl\u00fcssel&gt;\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{ \"token\": \"&lt;Mein-Challenge-Token&gt;\" }'\n</code></pre>"},{"location":"api/#health-api","title":"Health-API","text":"<p>Die Health-API liefert Informationen \u00fcber den Zustand des RESTCaptcha-Server.</p>"},{"location":"api/#request_3","title":"Request","text":"<pre><code>GET /health\n</code></pre> <p>Die Health-API kann optional \u00fcber einen API-Schl\u00fcssel abgesichert werden. Der API-Schl\u00fcssel kann entweder als <code>X-API-KEY</code>-Header oder als <code>Authorization</code>-Header \u00fcbergeben werden.</p> <code>X-API-KEY</code> <p>Dein API-Schl\u00fcssel als <code>X-API-KEY</code>-Header.</p> <p>Beispiel:</p> <pre><code>X-API-KEY: &lt;Mein-API-Schl\u00fcssel&gt;\n</code></pre> <code>Authorization</code> <p>Dein API-Schl\u00fcssel als <code>Authorization</code>-Header.</p> <p>Beispiel:</p> <pre><code>Authorization: ApiKey &lt;Mein-API-Schl\u00fcssel&gt;\n</code></pre>"},{"location":"api/#responses_3","title":"Responses","text":"<code>200 OK</code> (application/json) <p>Liefert ein JSON-Objekt mit Statusinformationen zur\u00fcck.  </p> <p>Beispiel:</p> <pre><code>{\n  \"hostName\": \"example.com\",\n  \"status\": \"success\"\n}\n</code></pre>"},{"location":"api/#beispiel_3","title":"Beispiel","text":"<pre><code>curl -sS https://captcha.beispiel.de/health \\\n  -H \"X-API-KEY: &lt;Mein-API-Schl\u00fcssel&gt;\" \\\n  -H \"Accept: application/json\"\n</code></pre>"},{"location":"captcha/","title":"Was sind CAPTCHAs?","text":"<p>CAPTCHAs (Completely Automated Public Turing tests to tell Computers and Humans Apart) sind Challenge-Response-Tests, die auf Webseiten verwendet werden, um echte Nutzer von automatisierten Bots zu unterscheiden. Sie verlangen in der Regel vom Nutzer eine Aufgabe, die f\u00fcr Menschen leicht, f\u00fcr Computersysteme jedoch schwierig zu l\u00f6sen sind (z.B. einen verzerrten Text zu lesen oder Objekte in Bildern zu identifizieren). Das Hauptziel ist es, b\u00f6sartige Software daran zu hindern, Online-Dienste zu missbrauchen (z. B. Spam in Formulare einzutragen, Daten abzugreifen oder betr\u00fcgerisch Konten zu erstellen). </p>"},{"location":"captcha/#warum-sind-captchas-notwendig","title":"Warum sind CAPTCHAs notwendig?","text":"<p>Der grundlegende Zweck eines CAPTCHAs ist es, automatisierten Missbrauch von Online-Systemen zu blockieren, w\u00e4hrend legitime menschliche Benutzer durchgelassen werden. Ohne CAPTCHAs oder \u00e4hnliche Formen der Mensch-Verifikation k\u00f6nnten b\u00f6sartige Bots:</p> <ul> <li> <p>Online-Formulare, Kommentare und E-Mails mit Spam oder sch\u00e4dlichen Links \u00fcberfluten.</p> </li> <li> <p>Tickets oder Produkte aufkaufen, indem sie K\u00e4ufe schneller automatisieren als echte Kunden.</p> </li> <li> <p>Credential-Stuffing oder Brute-Force-Angriffe auf Login-Seiten durchf\u00fchren.</p> </li> <li> <p>Massiv Konten erstellen (f\u00fcr Spam, Fake-Bewertungen oder Betrug) auf Plattformen mit kostenloser Registrierung.</p> </li> </ul> <p>CAPTCHAs schaffen Reibung f\u00fcr diese automatisierten Skripte. Wenn Nutzer beispielsweise ein verzerrtes Bild interpretieren oder ein R\u00e4tsel l\u00f6sen m\u00fcssen, kann das einen Bot erheblich verlangsamen oder abschrecken, da er menschen\u00e4hnliche Wahrnehmung br\u00e4uchte, um fortzufahren. So helfen CAPTCHAs sicherzustellen, dass nur echte Personen kritische Aktionen wie eine Kontoanmeldung oder das Senden eines Formulars ausf\u00fchren. </p> <p>Ganz wichtig: CAPTCHAs sind ein grobes Instrument und keine Allzweckl\u00f6sung. Sie stellen eine Belastung f\u00fcr alle Nutzer dar, und motivierte Angreifer werden immer Wege finden, sie zu umgehen. Dennoch bleiben CAPTCHAs eine effektive erste Verteidigungslinie, um opportunistischen Missbrauch zu verhindern, indem sie automatisierte Angriffe teuer oder unpraktisch machen.</p>"},{"location":"captcha/#traditionelle-captcha-methoden","title":"Traditionelle CAPTCHA-Methoden","text":"<p>Fr\u00fche und \"klassische\" CAPTCHAs pr\u00e4sentierten in der Regel explizite R\u00e4tsel, die Nutzer l\u00f6sen mussten. Diese traditionellen CAPTCHAs lassen sich in folgende g\u00e4ngige Muster unterteilen:</p> <ul> <li> <p>Verzerrte Text-CAPTCHAs: Die urspr\u00fcngliche Standardform eines CAPTCHAs zeigt ein Bild mit Text, der verzerrt, verrauscht oder verfremdet ist, und fordert den Benutzer auf, die abgebildeten Zeichen einzugeben. </p> <p>Die Verzerrung nutzt L\u00fccken in der maschinellen Bildverarbeitung aus: Menschen k\u00f6nnen die Buchstaben meist trotz St\u00f6rungen erkennen, Maschinen hatten (zumindest historisch) Schwierigkeiten bei Segmentierung und Erkennung. Zum Beispiel k\u00f6nnte das Wort \"klappsack\" mit unregelm\u00e4\u00dfigen Buchstaben und Hintergrundrauschen dargestellt werden, das OCR-Software verwirrt. </p> <p>Fr\u00fche CAPTCHAs wie die von Yahoo und der Carnegie Mellon University nutzten diese Methode. Mit der Zeit mussten sie schwieriger gestaltet werden (z. B. welligerer Text, unruhige Hintergr\u00fcnde), da sich OCR-Algorithmen verbesserten. Um 2012 l\u00f6sten Menschen Text-CAPTCHAs mit ca. 90\u201395 % Genauigkeit in ca. 10 Sekunden, aber die Erfolgsquote sank, je schwieriger die R\u00e4tsel wurden.</p> </li> <li> <p>Bildbasierte CAPTCHAs: Anstelle von Buchstaben verwenden einige CAPTCHAs Bilder. Nutzer m\u00fcssen dabei Bilder identifizieren, die ein bestimmtes Kriterium erf\u00fcllen \u2013 etwa \"W\u00e4hlen Sie alle Bilder mit Ampeln aus\" oder \"Klicken Sie auf alle Katzenfotos\". </p> <p>Die Idee dahinter ist, dass Objekterkennung f\u00fcr KI schwieriger ist als Texterkennung. Googles reCAPTCHA v2 (2014 eingef\u00fchrt) machte das Bildraster mit Stra\u00dfenschildern, Autos, Schaufenstern usw. popul\u00e4r und nutzte Googles riesige Bilddatenbanken. </p> <p>Ein fr\u00fcheres Beispiel war Microsofts Asirra (2007), das 12 Fotos von Haustieren zeigte und den Nutzer aufforderte, alle Katzen auszuw\u00e4hlen. Asirra berichtete von 99,6 % menschlicher Genauigkeit in unter 30 Sekunden und wurde subjektiv als angenehmer empfunden als das Entziffern von Buchstaben. Obwohl Asirra 2014 eingestellt wurde, lebt der Ansatz in modernen bildbasierten CAPTCHAs weiter.</p> </li> <li> <p>Einfache Fragen oder Mathematik-CAPTCHAs: Manche Seiten nutzen einfache Fragen (z. B. \"Welche Farbe hat der Himmel?\") oder Rechenaufgaben (\"3 + 5 = ?\") als CAPTCHAs. Diese sind f\u00fcr die meisten Menschen leicht und einfach zu beantworten. Sie werden manchmal MAPTCHAs (f\u00fcr Math CAPTCHAs) genannt. Ihre Sicherheit ist jedoch schwach, da Bots mit kleinem Wissensschatz oder OCR schnell angepasst werden k\u00f6nnen. F\u00fcr Szenarien mit geringem Risiko oder Barrierefreiheit sind sie ausreichend, ansonsten leicht zu umgehen.</p> </li> <li> <p>Audio-CAPTCHAs: Zur Unterst\u00fctzung sehbehinderter Nutzer bieten viele CAPTCHA-Systeme eine Audio-Alternative. Dabei wird typischerweise eine verzerrte Zahlen- oder Buchstabenfolge \u00fcber Hintergrundger\u00e4usche abgespielt, die der Nutzer eintippen muss. </p> <p>In der Praxis sind Audio-CAPTCHAs f\u00fcr viele sehr schwierig. Studien zeigen, dass blinde Nutzer bei Audio-CAPTCHAs nur ca. 45 % Erfolgsquote hatten, mit durchschnittlich \u00fcber einer Minute Bearbeitungszeit. </p> <p>Ironischerweise konnten Forscher viele Audio-CAPTCHAs softwareseitig (mittels Signalverarbeitung und Spracherkennung) leichter knacken als visuelle Varianten. Daher sind Audio-CAPTCHAs zwar wichtig f\u00fcr Barrierefreiheit, stellen aber eine Schwachstelle in Sicherheit und Nutzbarkeit dar.</p> </li> <li> <p>CAPTCHA-Varianten und Spiele: Es gibt Dutzende weitere Varianten. Manche nutzen Logikr\u00e4tsel oder Quizfragen (\"Beantworte ein einfaches R\u00e4tsel\"), interaktive Spiele (Teile bewegen, Muster nachzeichnen) oder fordern Nutzer auf, eine geometrische Figur zu zeichnen. </p> <p>Ein experimentelles CAPTCHA lie\u00df Nutzer kurze Spiele spielen, bei denen bewegte Objekte identifiziert werden mussten. Microsofts Forschungsprototyp PixelPlotter lie\u00df Nutzer Punkte in einem Bild verbinden. </p> <p>Diese Varianten sind weniger verbreitet, zeigen aber die Bandbreite menschlicher Aufgaben, die als CAPTCHA genutzt werden. Wichtig ist, dass die Aufgabe f\u00fcr durchschnittliche Menschen einfach, f\u00fcr automatisierte Skripte jedoch schwer ist.</p> </li> </ul>"},{"location":"captcha/#alternativen-zu-traditionellen-captchas","title":"Alternativen zu traditionellen CAPTCHAs","text":"<p>\u00dcber die klassischen (Text- oder Bildr\u00e4tsel) hinaus gibt es alternative Ans\u00e4tze und Dienste, die dasselbe Problem der Bot-Abwehr adressieren. Manche k\u00f6nnen zus\u00e4tzlich oder statt der klassischen CAPTCHAs eingesetzt werden:</p> <ul> <li> <p>Google reCAPTCHA (v2 und v3): Googles reCAPTCHA ist der am weitesten verbreitete Dienst. </p> <p>ReCAPTCHA v2 (2014) f\u00fchrte das ber\u00fchmte \"Ich bin kein Roboter\"-Kontrollk\u00e4stchen ein, das beim Anklicken unsichtbare Analysen des Nutzers durchf\u00fchrt (Cookies, Browser-Fingerprint, Google-Kontoaktivit\u00e4t etc.), um die Wahrscheinlichkeit f\u00fcr menschliches Verhalten einzusch\u00e4tzen. Bei geringer Sicherheit zeigt es dann klassische Bild- oder Audio-R\u00e4tsel. Dies beschleunigte die Verifikation f\u00fcr die meisten legitimen Nutzer (oft nur ein Klick), weshalb Google es auch \"No CAPTCHA reCAPTCHA\" nannte. Kritik kam jedoch auf, da das Verfahren stark vom Google-Login-Status abh\u00e4ngt. Ein Chrome-Nutzer, der bei Gmail angemeldet ist, kommt meist sofort durch, w\u00e4hrend ein datenschutzbewusster Firefox-Nutzer mit Tracking-Schutz viele Bildr\u00e4tsel l\u00f6sen muss. </p> <p>reCAPTCHA v3 (2018) wiederum ist ein vollst\u00e4ndig unsichtbares, score-basiertes System. Website-Betreiber m\u00fcssen die Scores selbst interpretieren und Aktionen festlegen, was komplex sein kann. </p> <p>Beide Versionen sind bis zu einem hohen Volumen kostenlos, doch Google setzte ein Limit von 1 Mio. Aufrufen pro Monat durch (dar\u00fcber kostenpflichtige Enterprise-Tarife). Das f\u00fchrte dazu, dass gro\u00dfe Webseiten (z. B. Cloudflare) aus Kostengr\u00fcnden und wegen Datenschutzbedenken Alternativen suchten.</p> </li> <li> <p>hCaptcha: hCaptcha wurde ab 2019\u20132020 popul\u00e4r als Ersatz f\u00fcr reCAPTCHA und positioniert sich als datenschutzfreundlicher und f\u00fcr Seitenbetreiber lohnend. Die Herausforderungen \u00e4hneln reCAPTCHA v2 (Bildklassifikationsaufgaben), aber ein wesentlicher Unterschied ist, dass hCaptcha Website-Betreiber f\u00fcr die Bildannotation durch Nutzer bezahlt. Unternehmen, die Trainingsdaten ben\u00f6tigen, bezahlen hCaptcha. Die Arbeit wird in Form von CAPTCHAs an Nutzer weitergegeben, wobei Seitenbetreiber am Umsatz beteiligt werden. </p> <p>Cloudflare wechselte 2020 von Google zu hCaptcha, als Googles Preise sich \u00e4nderten, auch um Googles Tracking einzuschr\u00e4nken. In der Nutzererfahrung gelten hCaptcha-Aufgaben teils als schwieriger oder ungewohnter (z. B. weniger offensichtliche Objekte). Aber auch hier gilt das Prinzip: Wenn man sicher menschlich ist, sieht man keine Herausforderung; wenn nicht, muss man eine l\u00f6sen. </p> <p>hCaptcha bietet auch einen unsichtbaren Modus und Barrierefreiheitsoptionen (Audio oder Logikr\u00e4tsel).</p> </li> <li> <p>Cloudflare Turnstile: Cloudflare stellte 2022 Turnstile vor, ein CAPTCHA-as-a-Service, das auch von Nicht-Cloudflare-Kunden genutzt werden kann. Standardm\u00e4\u00dfig unsichtbar, laufen Hintergrundpr\u00fcfungen, sobald ein Nutzer mit einer gesch\u00fctzten Seite interagiert. Nur wenn n\u00f6tig, wird eine kleine Aufgabe angezeigt (z. B. Bild drehen). </p> <p>Turnstile legt gro\u00dfen Wert auf Datenschutz: Es verarbeitet alle Verifikationen im Browser und speichert keine personenbezogenen Daten auf Cloudflare-Servern. Damit erf\u00fcllt es strenge DSGVO-Anforderungen, die Googles CAPTCHA problematisch machen. Die Aufgaben sind schnell und sprachunabh\u00e4ngig, z. B. ein Bild aufrichten. </p> <p>Manche Sicherheitsforscher bemerken, dass diese Aufgaben f\u00fcr Bots leichter zu l\u00f6sen sein k\u00f6nnten, aber Turnstile versucht die mit zus\u00e4tzlichen Signalen und Updates auszugleichen. </p> </li> <li> <p>FriendlyCaptcha: FriendlyCaptcha verfolgt einen ganz anderen Ansatz: Proof-of-Work-Puzzles statt menschlicher Aufgaben. Der Browser des Nutzers muss beim Besuch einer Seite ein kryptografisches Puzzle l\u00f6sen (\u00e4hnlich einem kleinen Hashcash). Das l\u00e4uft im Hintergrund, der Nutzer sieht nur eine kurze Ladeanzeige. </p> <p>F\u00fcr Bots ist dies im gro\u00dfen Stil teuer, f\u00fcr Menschen bedeutet es nur Sekunden Verz\u00f6gerung. Nutzer m\u00fcssen nichts klicken oder tippen, was es extrem barrierefrei und nutzerfreundlich macht. Verd\u00e4chtige Nutzer bekommen schwerere Aufgaben, aber ebenfalls ohne Interaktion. </p> <p>FriendlyCaptcha erhebt keine personenbezogenen Daten, was strengen Datenschutzauflagen entspricht. Die Schw\u00e4che: Die Sicherheit basiert darauf, dass Angreifer nicht genug Rechenleistung einsetzen k\u00f6nnen. Auf sehr schwachen Ger\u00e4ten kann es zudem Leistung kosten. Dennoch ist es als Teil einer mehrschichtigen Verteidigung attraktiv.</p> </li> <li> <p>Device Fingerprinting &amp; Reputationssysteme: Manche Dienste verzichten ganz auf explizite R\u00e4tsel und nutzen Ger\u00e4te-/Browser-Fingerprinting und IP-Reputation, um Bots zu erkennen. </p> <p>Wenn ein Fingerprint einem bekannten Headless-Browser \u00e4hnelt, wird die Anfrage still blockiert oder verlangsamt. Oft wird dies kombiniert: Bekannte schlechte Anfragen werden blockiert oder mit schwerem CAPTCHA belegt, bekannte gute Nutzer erhalten kein CAPTCHA oder nur einfache Pr\u00fcfungen. </p> <p>Vorteil: Keine Nutzerbelastung. Nachteil: M\u00f6gliche False Positives (ungew\u00f6hnliche, aber legitime Nutzer) und st\u00e4ndige Anpassung n\u00f6tig. </p> <p>Solche Verfahren sind meist Teil mehrschichtiger Systeme wie reCAPTCHA v3.</p> </li> <li> <p>Proof-of-Work-Challenges: \u00dcber FriendlyCaptcha hinaus wird Proof-of-Work als Zugangskontrolle diskutiert. Manche Webseiten erfordern eine kleine Rechenaufgabe (Hash-Berechnung) pro Anfrage. Dies kann per JavaScript geschehen. </p> <p>Verbraucher-Webseiten setzen dies noch selten ein, h\u00e4ufiger wird es f\u00fcr API-Drosselung genutzt. Ziel ist es, massenhafte Anfragen teuer zu machen. Nachteil: langsame Ger\u00e4te leiden, und Angreifer mit viel Rechenleistung k\u00f6nnen es aushebeln.</p> </li> <li> <p>Honeypot-Felder und Zeit-Tests: Eine einfache Alternative ist ein Honeypot-Feld (Honigtopf). Das ist ein unsichtbares Formularfeld, das Menschen nicht ausf\u00fcllen, Bots jedoch schon. So kann der Server Bots erkennen und blockieren. </p> <p>\u00c4hnlich kann die Zeit zwischen Laden und Absenden gemessen werden. Wenn ein Formular beispielsweise innerhalb einer Sekunde abgeschickt wird, war es vermutlich ein Bot. </p> <p>Diese Tests sind einfach und belasten Nutzer nicht, stoppen aber nur einfache Bots. Fortgeschrittene Angreifer sind ind er Lage, diese zu umgehen.</p> </li> </ul>"},{"location":"captcha/#abgrenzung-zu-restcaptcha","title":"Abgrenzung zu RESTCaptcha","text":"<p>RESTCaptcha implementiert eine Kombination aus Proof-of-Work-Challenge, Analyse von Zeitmetriken und lokalem Device Fingerprinting. </p> <p>Um es vorweg zu nehmen: RESTCaptcha ist keine revolution\u00e4re Neuerung ins Sachen CAPTCHA-Architektur. Vielmehr ging es uns darum, folgende Anforderungen umzusetzen:</p> <ul> <li> <p>Eine Open-Source-L\u00f6sung, die komplett konfigurierbar ist und von jederman selbst gehostet weden kann (Stichwort: Digitale Souver\u00e4nit\u00e4t)</p> </li> <li> <p>Eine datenschutzfreundliche, DSGVO-kompatible Implementation. Also keine Speicherung von personenbezogenen Daten.</p> </li> <li> <p>Eine sehr einfache Integration in bestehende Webseiten, ohne gr\u00f6\u00dfere Programmierarbeit.</p> </li> <li> <p>Eine Nutzererfahrung, die angenehm und m\u00f6glichst barrierefrei ist. Also keine Bilder\u00e4tsel, verzerrten Texte oder mathematischen Rechenaufgaben, die man vor lauter Stress auch noch falsch l\u00f6st.</p> </li> </ul>"},{"location":"change-log/","title":"\u00c4nderungslog","text":"<p>RESTCaptcha ist Open Source unter GitHub. Dort kann die detailierte Commit-Historie eingesehen werden. Dieses \u00c4nderungslog dient als zusammenfassender \u00dcberblick der \u00c4nderungen.</p> <p>Wir halten uns dabei weitestgehend an die Empfehlungen aus dem Community-Projekt Keep a Changelog.</p>"},{"location":"change-log/#010-_-29-oktober-2025","title":"0.1.0 _ 29. Oktober 2025","text":"<p>Erste Ver\u00f6ffentlichung.</p>"},{"location":"community/","title":"Community","text":"<p>RESTCaptcha ist Open Source. Ein Projekt wie dieses lebt von den Nutzern, die es nutzen. Wie freuen uns \u00fcber Feedback und Hilfe jeglicher Art:</p> <ul> <li>Ein Frage oder Meldung im GitHub Issue Tracker erstellen.</li> <li>Eine Diskussion unter GitHub Discussions starten.</li> <li>Einen Pull-Request initiieren.</li> </ul>"},{"location":"configuration/","title":"Konfiguration","text":"<p>In diesem Kapitel beschreiben wir die Konfigurationsm\u00f6glichkeiten des RESTCaptcha-Server. </p> <p>Die gesamte Konfiguration des RESTCaptcha-Server befindet sich in der JSON-Datei <code>appsettings.Production.json</code>, die Du beim Installieren bereits angelegt hast. </p>"},{"location":"configuration/#restcaptcha","title":"RestCaptcha","text":"<p>Alle RESTCaptcha-spezifischen Konfigurationsdaten befinden sich unter <code>RestCaptcha</code>. Der folgende Konfigurationsausschnitt zeigt die Standardwerte f\u00fcr <code>RestCaptcha</code>: </p> <pre><code>{\n  ...\n  \"RestCaptcha\": {\n    \"ChallengeType\": {\n      ...\n    },\n    \"HMACKey\": \"&lt;Generierter Wert&gt;\",\n    \"NonceMaxTTL\": \"00:30:00\",\n    \"VerificationMinDelay\": \"00:00:02\",\n    \"HealthCheck\": {\n      ...\n    },\n    \"Sites\": [\n      ...\n    ]\n  }\n}\n</code></pre> <p>Die Eigenschaften haben folgende Bedeutung:</p> <code>ChallengeType</code> <p>Konfigurationsdaten zum Challenge-Typ, den eine Formularseite bei Anfrage zur\u00fcckgesendet bekommt (siehe weiter unten). Der Challenge-Typ definiert, was der Nutzer einer Formularseite bzw. die Formularseite selbst machen muss, um eine g\u00fcltige L\u00f6sung zu generieren.</p> <code>HMACKey</code> <p>Geheimer Schl\u00fcssel f\u00fcr HMAC (Hash-based Message Authentication Code). Der generierte Standardwert bei Nichtangabe ist nicht kryptografisch sicher. Bitte verwende einen Zufallsgenerator wie z.B. 1Password - Password Generator.</p> <code>NonceMaxTTL</code> <p>Maximale Lebensdauer der eindeutigen Nonce. Der Standardwert ist <code>\"00:30:00\"</code> (30 Minuten).</p> <code>VerificationMinDelay</code> <p>Mindestverz\u00f6gerung zwischen dem Empfang der Challenge-Anfrage und der serverseitigen \u00dcberpr\u00fcfung. Der Standardwert ist <code>\"00:00:02\"</code> (2 Sekunden).</p> <code>HealthCheck</code> <p>Konfigurationsdaten zum HealthCheck-Endpunkt (siehe weiter unten).</p> <code>Sites</code> <p>Konfigurationsdaten der registrierten Webseiten (siehe weiter unten).</p>"},{"location":"configuration/#restcaptchachallengetype","title":"RestCaptcha.ChallengeType","text":"<p>RESTCaptcha ist dazu ausgelegt, mit unterschiedlichen Challenge-Typen zu arbeiten (momentan ist aber nur einer implementiert \ud83d\ude0a).</p> <code>type</code> <p>Der Challenge-Typ, den eine Formularseite bei Anfrage zur\u00fcckgesendet bekommt:</p> Wert Beschreibung <code>proofOfWork</code> Proof of Work (zu Deutsch: Arbeitsnachweis)"},{"location":"configuration/#proofofwork","title":"ProofOfWork","text":"<p>Der folgende Konfigurationsausschnitt zeigt die Standardwerte des Challenge-Typs <code>proofOfWork</code>: </p> <pre><code>{\n  ...\n  \"RestCaptcha\": {\n    \"ChallengeType\": {\n      \"type\": \"proofOfWork\",\n      \"algorithm\": \"hash-sha-256\",\n      \"difficulty\": 4\n    },\n    ...\n  }\n}\n</code></pre> <p>Die Eigenschaften haben folgende Bedeutung:</p> <code>algorithm</code> <p>Der zu nutzende Hash-Algorithmus:</p> Wert Beschreibung <code>hash-sha-256</code> SHA 256-basierter Hash-Algorithmus <code>hash-sha-384</code> SHA 384-basierter Hash-Algorithmus <code>hash-sha-512</code> SHA 512-basierter Hash-Algorithmus <code>difficulty</code> <p>Schwierigkeitsgrad der Challenge. Der Standardwert ist <code>4</code>.</p>"},{"location":"configuration/#restcaptchahealthcheck","title":"RestCaptcha.HealthCheck","text":"<p>Der RESTCaptcha-Server implementiert einen HealthCheck-Endpunkt, der optional durch einen API-Schl\u00fcssel gesch\u00fctzt werden kann. Der HealthCheck-Endpunkt gibt auf Anfrage Metriken zum Zustand des RESTCaptcha-Server zur\u00fcck. </p> <p>Eine typsche Antwort sieht wie folgt aus:</p> <pre><code>{\n  \"status\": \"pass\",\n  \"version\": \"0.0.1.20175\",\n  \"serviceId\": \"restcaptcha\",\n  \"checks\": {\n    \"uptime\": [\n      {\n        \"componentType\": \"system\",\n        \"observedValue\": 0,\n        \"observedUnit\": \"s\",\n        \"time\": \"2025-10-16T14:05:11.5262654+00:00\"\n      }\n    ]\n  }\n}\n</code></pre> <p>Standardm\u00e4\u00dfig ist der HealthCheck-Endpunkt ohne Einschr\u00e4nkungen erreichbar, kann aber jederzeit eingeschr\u00e4nkt oder ganz deaktiviert werden. Die folgende Konfigurationsausschnitt zeigt die Standardwerte f\u00fcr <code>RestCaptcha.HealthCheck</code>: </p> <pre><code>{\n  ...\n  \"RestCaptcha\": {\n    \"HealthCheck\": {\n      \"Enabled\": true,\n      \"PrivateOnly\": false,\n      \"AllowLocal\": false,\n      \"AllowCidrs\": [],\n      \"Keys\": []\n    },\n    \"Sites\": [\n      ...\n    ]\n  }\n}\n</code></pre> <p>Die Eigenschaften haben folgende Bedeutung:</p> <code>Enabled</code> <p>Ein boolscher Wert:</p> Wert Beschreibung <code>true</code> HealthCheck-Endpunkt ist aktiviert <code>false</code> HealthCheck-Endpunkt ist deaktiviert <code>PrivateOnly</code> <p>Steuert, ob nur Endpunkt privat ist. In diesem Fall sind nur Anfragen von Loopback-Adressen und von den unter <code>AllowCidrs</code> definierte Netzwerkbereiche zugelassen. API-Schl\u00fcssel werden ignoriert und \u00f6ffentliche Anfragen abgelehnt.</p> Wert Beschreibung <code>true</code> Privater Endpunkt <code>false</code> \u00d6ffentlicher Endpunkt <code>AllowLocal</code> <p>Steuert, ob Anfragen von lokalen Loopback-Adressen zugelassen werden sollen. Hinter einem Proxy (z.B. nginx) muss sichergestellt werden, dass die weitergeleiteten Header so konfiguriert sind, dass die effektive Client-IP \u00fcbergeben wird.</p> Wert Beschreibung <code>true</code> Lokale Loopback-Adressen zulassen <code>false</code> Lokale Loopback-Adressen ablehnen <code>AllowCidrs</code> <p>Eine Liste vertrauensw\u00fcrdiger Netzwerkbereiche in CIDR-Notation (Classless Inter-Domain Routing). Ist <code>PrivateOnly = false</code>, sind Anfragen aus diesen Bereichen ohne API-Schl\u00fcssel erlaubt. Ist <code>PrivateOnly = true</code>, sind nur Anfragen aus diesen Bereichen (plus Loopback, falls aktiviert) zul\u00e4ssig.</p> <code>Keys</code> <p>Eine Liste von m\u00f6glichen API-Schl\u00fcsseln f\u00fcr die Authorisierung des HealthCheck-Endpunkts.</p>"},{"location":"configuration/#restcaptchasites","title":"RestCaptcha.Sites","text":"<p>Damit Webseiten mit dem RESTCaptcha-Server interagieren k\u00f6nnen, m\u00fcssen Sie registriert werden. Die folgende Konfigurationsausschnitt zeigt eine typische Registrierung: </p> <pre><code>{\n  ...\n  \"RestCaptcha\": {\n    ...\n    \"Sites\": [\n      {\n        \"name\": \"Mein Site\",\n        \"description\": \"Nur zum Testen\",\n        \"siteKey\": \"Mein-Site-Schl\u00fcssel\",\n        \"siteSecret\": \"AeyGWx3kQeyrDFCE5KDR\",\n        \"validHostNames\": [\"www.beispiel.de\"]\n      }\n    ]\n  }\n}\n</code></pre> <p>Die Eigenschaften haben folgende Bedeutung:</p> <code>name</code> <p>Name der registrierten Webseite. Dient nur zu Dokumentationszwecken.</p> <code>description</code> <p>Zus\u00e4tzliche Beschreibung der registrierten Webseite. Dient nur zu Dokumentationszwecken.</p> <code>siteKey</code> <p>Schl\u00fcssel f\u00fcr die Zuordnung von Anfragen zu einer registrierten Webseite.</p> <code>siteSecret</code> <p>Kennwort f\u00fcr die Authorisierung von Anfragen f\u00fcr die registrierte Webseite.</p> <code>validHostNames</code> <p>Eine optionale Liste von g\u00fcltigen Domainnamen, die mit dieser Website verkn\u00fcpft sind. Ist die Liste gef\u00fcllt, werden nur Anfragen entgegenneommen, die von diesen Dom\u00e4nen stammen. Hinter einem Proxy (z.B. nginx) muss sichergestellt werden, dass der urspr\u00fcngliche Hostname weitergeleitet wird.</p>"},{"location":"configuration/#serilog","title":"SeriLog","text":"<p>Der RESTCaptcha-Server nutzt f\u00fcr das Logging die .NET-Bibliothek Serilog. RESTCaptcha implementiert die folgenden Log-Ausgaben:</p> <ul> <li> <p>Konsolenausgabe</p> <p>Beispiel:</p> <pre><code>{\n  \"Serilog\": {\n    \"Using\": [\n      \"Serilog.Sinks.Console\",\n    ],\n    \"WriteTo\": [{\"Name\": \"Console\"}]\n  }\n  ...\n}\n</code></pre> </li> <li> <p>Dateiausgabe</p> <p>Beispiel:</p> <pre><code>{\n  \"Serilog\": {\n    \"Using\": [\n      \"Serilog.Sinks.File\",\n    ],\n    \"WriteTo\": [\n      \"Name\": \"File\",\n      \"Args\": {\n        \"path\": \"/var/log/restcaptcha/log-.txt\",\n        \"rollingInterval\": \"Day\",\n        \"retainedFileCountLimit\": 7,\n        \"fileSizeLimitBytes\": 10000000,\n        \"rollOnFileSizeLimit\": true\n      }          \n    ]\n  }\n  ...\n}\n</code></pre> </li> <li> <p>OpenTelemetry-Ausgabe</p> </li> </ul>"},{"location":"faq/","title":"H\u00e4ufig gestellte Fragen (FAQ)","text":"<p>Ist RESTCaptcha wirklich kostenlos? Gibt es nicht bereits andere CAPTCHA-L\u00f6sungen? In unseren FAQ erh\u00e4ltst Du Antworten auf die am h\u00e4ufigsten gestellten Fragen zum RESTCaptcha-Projekt.</p>"},{"location":"faq/#kann-ich-restcaptcha-kostenfrei-nutzen","title":"Kann ich RESTCaptcha kostenfrei nutzen?","text":"<p>Ja, das RESTCaptcha-Projekt ist Open Source, die Nutzung ist kostenfrei und auch in kommerziellen Projekten erlaubt. RESTCaptcha ist unter der AGPL lizenziert.</p>"},{"location":"faq/#gibt-es-nicht-schon-1000-andere-captcha-losungen","title":"Gibt es nicht schon 1.000 andere CAPTCHA-L\u00f6sungen?","text":"<p>Also tausende sicherlich nicht, aber ja, nat\u00fcrlich gibt es bereits zahlreiche L\u00f6sungen dieser Art. Diese unterscheiden sich jedoch zum Teil erheblich:</p> <ul> <li> <p>Bekannte L\u00f6sungen wie Google reCaptcha sind zwar frei nutzbar aber nicht (vollst\u00e4ndig) Open Source. Du musst hier abw\u00e4gen zwischen Funktionalit\u00e4t und Datenschutz, sowie einer gewissen Abh\u00e4ngigkeit vom Anbieter.</p> </li> <li> <p>Manche Open-Source-L\u00f6sungen sind nur teilweise Open Source, d.h. eine Core-Variante der L\u00f6sung soll Geschmack machen auf die umfassende SaaS-L\u00f6sung. Das muss aber kein Nachteil f\u00fcr die Core-Variante sein.</p> </li> <li> <p>Wiederum andere L\u00f6sungen sind vollst\u00e4ndig Open Source, kommen aber noch aus der guten alten Zeit der Bilderr\u00e4tsel und verzerrten Buchstabenausgabe.</p> </li> </ul> <p>Wer jedoch eine moderne CAPTCHA-L\u00f6sung f\u00fcr den Eigenbetrieb sucht, die komplett Open Source ist, keine Abh\u00e4ngigkeiten wie z.B. eine Datenbank ben\u00f6tigt und wer vielleicht sogar eine kleine Schw\u00e4che f\u00fcr die Open-Source-Entwicklerplattform .NET hat, dem sei RESTCaptcha ans Herz gelegt. </p>"},{"location":"faq/#was-bedeutet-eigenbetrieb-eigentlich-genau","title":"Was bedeutet \"Eigenbetrieb\" eigentlich genau?","text":"<p>Eine L\u00f6sung wie RESTCaptcha selber zu betreiben (Englisch: self-hosting), bedeutet, dass Du als Administrator RESTCaptcha auf einem Server Deiner Wahl installierst, konfigurierst und betreust. Damit hast Du die komplette Kontrolle \u00fcber Deinen CAPTCHA-Dienst. Alle Informationen zu Installation, Konfiguration und Integration von RESTCaptcha findest Du auf dieser Webseite.</p> <p>Solltest Du trotzdem das Gef\u00fchl haben, eine helfende Hand zu ben\u00f6tigen, frag uns einfach unter <code>openpotato@stueber.de</code>. Wir bei\u00dfen nicht :-)</p>"},{"location":"faq/#ich-habe-einen-fehler-gefunden","title":"Ich habe einen Fehler gefunden!","text":"<p>Bitte gib uns Bescheid. Am besten via GitHub-Issue-Tracker.</p>"},{"location":"faq/#ich-will-mitmachen","title":"Ich will mitmachen!","text":"<p>Du hast einen Vorschlag zur Verbesserung? Immer her damit, am Besten als Diskussionsbeitrag unter GitHub. </p> <p>Noch besser, Du hast einen Fehler korrigiert oder eine Verbesserung programmiert? Prima, wir warten auf Deinen Pull-Request unter GitHub.</p>"},{"location":"faq/#noch-fragen","title":"Noch Fragen?","text":"<p>Du kannst uns jederzeit fragen. Nutze daf\u00fcr den GitHub-Issue-Tracker. Du willst uns lieber eine E-Mail schreiben? Gerne, schreib uns an <code>openpotato@stueber.de</code>.</p>"},{"location":"integration/","title":"Integration","text":"<p>Die Integration von RESTCaptcha in eine Webseite ist recht einfach. In dieser Dokumentation gehen wir von folgender Umgebung aus:</p> <ul> <li>Der RESTCaptcha-Server ist installiert und unter der URL <code>https://captcha.beispiel.de</code> erreichbar.</li> <li>Deine Webseite hat ein Backend, das Formularanfragen via <code>POST</code> entgegennehmen kann</li> </ul> <p>Wir werden jetzt folgendes machen:</p> <ol> <li>Das RESTCaptcha-JS-Skript in Deine Webseite einf\u00fcgen.</li> <li>Ein leeres Container-Element in Deine Webseite einf\u00fcgen und dieses konfigurieren.</li> <li>Im Backend Deiner Webseite die Challenge-L\u00f6sung entgegennehmen und mit Hilfe des RESTCaptcha-Servers \u00fcberpr\u00fcfen lassen.</li> </ol>"},{"location":"integration/#skript-einfugen","title":"Skript einf\u00fcgen","text":"<p>F\u00fcge das Widget-Skript in den <code>&lt;head&gt;</code>-Bereich oder ans Ende von <code>&lt;body&gt;</code> Deiner Webseite ein:</p> <pre><code>&lt;script src=\"https://captcha.beispiel.de/restcaptcha.min.js\"&gt;&lt;/script&gt;\n</code></pre> <p>Das Skript sucht automatisch nach HTML-Elementen mit <code>id=\"restcaptcha-widget\"</code> (au\u00dfer im Headless-Modus, siehe unten) und initialisiert das RESTCaptcha-Widget.</p>"},{"location":"integration/#container-element-einfugen","title":"Container-Element einf\u00fcgen","text":"<p>F\u00fcge auf Deiner Formularseite ein leeres HTML-Element ein, das vom RESTCaptcha-JS-Skript zum Rendern des RESTCaptcha-Widgets genutzt wird. Dieses Element musst Du mit passenden Attributen anreichern. Die wichtigsten w\u00e4ren:</p> <ul> <li><code>id</code> (Hallo, ich bin ein RESTCaptcha-Widget, der Standardwert ist <code>restcaptcha-widget</code>), </li> <li><code>data-api-baseurl</code> (Wo befindet sich mein RESTCaptcha-Server?) </li> <li><code>data-sitekey</code> (Authentifizierung).</li> <li><code>data-widget-mode</code> (Modus, der Standardwert ist <code>interactive</code>)</li> </ul> <p>Das sieht dann in etwa so aus:</p> <pre><code>&lt;div \n  id=\"restcaptcha-widget\"\n  data-api-baseurl=\"https://captcha.beispiel.de/v1/\"\n  data-sitekey=\"&lt;Mein-Site-Schl\u00fcssel&gt;\"\n  data-widget-mode=\"interactive\"&gt;\n  ...\n&lt;/div&gt;\n</code></pre> <p>Sobald die Challenge interaktiv oder automatisch gel\u00f6st wurde, f\u00fcgt das RESTCaptcha-JS-Skript zwei zus\u00e4tzliche aber unsichtbare <code>&lt;input&gt;</code>-Felder in Deine Webseite ein: Ein Feld f\u00fcr die Challenge-L\u00f6sung und ein anderes f\u00fcr ein kryptografisches Token zur Absicherung der L\u00f6sung.</p> <p>Wenn der Benutzer die Daten des Web-Formulars an Deinen Server \u00fcbertr\u00e4gt, werden dies Felder automatisch mitgesendet.</p> <p>Es folgt ein minimales aber komplettes Beispiel f\u00fcr eine Webseite mit integriertem RESTCaptcha-Widget:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;head&gt;\n  &lt;script async defer src=\"https://captcha.beispiel.de/restcaptcha.min.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;form id=\"login-form\" method=\"POST\" action=\"submit\"&gt;\n    &lt;label for=\"username\"&gt;Username&lt;/label&gt;\n    &lt;input id=\"username\" name=\"username\" required&gt;\n    &lt;label for=\"password\"&gt;Password&lt;/label&gt;\n    &lt;input id=\"password\" type=\"password\" name=\"password\" required&gt;\n    &lt;div\n      id=\"restcaptcha-widget\"\n      data-api-baseurl=\"https://captcha.beispiel.de/v1/\"\n      data-sitekey=\"DEIN_SITE_KEY\"\n      data-widget-mode=\"interactive\"\n      data-callback-solved=\"onCaptchaSolved\"\n      data-callback-reset=\"onCaptchaReset\"&gt;\n    &lt;/div&gt;\n    &lt;button id=\"loginButton\" type=\"submit\" disabled&gt;Login&lt;/button&gt;\n  &lt;/form&gt;\n  &lt;script&gt;\n    function onCaptchaSolved(token, solution) {\n      // Wird aufgerufen, sobald der Nutzer die Aufgabe gel\u00f6st hat\n      document.getElementById('loginButton').disabled = false;\n    }\n    function onCaptchaReset() {\n      // Wird aufgerufen, wenn der Captcha-Status zur\u00fcckgesetzt wird\n      document.getElementById('loginButton').disabled = true;\n    }\n  &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Was passiert hier?</p> <ol> <li> <p>Das RESTCaptcha-Widget wird automatisch gerendert.</p> </li> <li> <p>Wird die Challenge gestarted (durch Klicken des Nutzers), dauert es etwas, bis die L\u00f6sung gefunden ist.</p> </li> <li> <p>Nach erfolgreicher L\u00f6sung werden die folgenden zwei Felder ins Formular eingef\u00fcgt:</p> <ul> <li><code>captcha-token</code></li> <li><code>captcha-solution</code></li> </ul> </li> <li> <p>Mit diesen beiden Werten verifizierst Du serverseitig die L\u00f6sung (siehe n\u00e4chster Abschnitt).</p> </li> </ol>"},{"location":"integration/#serverseitige-verifikation","title":"Serverseitige Verifikation","text":"<p>Die Verifikation auf Serverseite geschieht nach folgendem Prinzip:</p> <ol> <li>Das Formular wird an Dein Backend gesendet. Es enth\u00e4lt u.a. die Felder <code>captcha-token</code> und <code>captcha-solution</code>.</li> <li>Dein Backend ruft die RESTCaptcha-API auf, authentifiziert bzw. autorisiert sich mit <code>DEIN_SITE_KEY</code> und einem zus\u00e4tzlichen <code>DEIN_SITE_SECRET</code> und l\u00e4sst Token und L\u00f6sung pr\u00fcfen.</li> <li>Nur nach erfolgreicher Verifikation verarbeitest Du die eigentlichen Formulardaten weiter.</li> </ol> <p>Es folgt ein minimales Beispiel in PHP:</p> <pre><code>&lt;?php\n// POST-Werte aus dem Formular\n$token    = $_POST['captcha-token']    ?? '';\n$solution = $_POST['captcha-solution'] ?? '';\n\n// Konfiguration\n$siteKey    = 'DEIN_SITE_KEY';\n$siteSecret = 'DEIN_SITE_SECRET';\n\n// Optional (f\u00fcr Logging/Rate-Limits)\n$callerIp = $_SERVER['REMOTE_ADDR'] ?? '';\n\n// Request-Daten vorbereiten\n$payload = [\n  'siteSecret' =&gt; $siteSecret,\n  'solution'   =&gt; $solution,\n  'token'      =&gt; $token,\n  'callerIp'   =&gt; $callerIp\n];\n\n// cURL initialisieren\n$ch = curl_init('https://captcha.beispiel.de/v1/verify?siteKey=' . urlencode($siteKey));\ncurl_setopt_array($ch, [\n    CURLOPT_RETURNTRANSFER =&gt; true,\n    CURLOPT_POST           =&gt; true,\n    CURLOPT_HTTPHEADER     =&gt; ['Content-Type: application/json'],\n    CURLOPT_POSTFIELDS     =&gt; json_encode($payload),\n    CURLOPT_TIMEOUT        =&gt; 10,\n]);\n\n$response = curl_exec($ch);\n$httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n$error    = curl_error($ch);\ncurl_close($ch);\n\n// Fehlerbehandlung\nif ($error) {\n    die(\"Verbindungsfehler bei der CAPTCHA-Verifikation: $error\");\n}\n\n// Antwort auslesen\n$data = json_decode($response, true);\n\n// Erfolg, wenn HTTP 200 und status == \"success\"\n$isVerified = ($httpCode === 200 &amp;&amp; isset($data['status']) &amp;&amp; $data['status'] === 'success');\n\nif ($isVerified) {\n  // OK &gt; Nutzeraktion erlauben\n} else {\n  // Fehlgeschlagen &gt; Formular mit Fehlermeldung anzeigen\n}\n?&gt;\n</code></pre> <p>Wichtig!</p> <p>Das siteSecret geh\u00f6rt nur auf Deinen Server. Niemals im Browser exponieren!</p>"},{"location":"integration/#weitere-hilfen","title":"Weitere Hilfen","text":"<p>F\u00fcr die serverseitige Integration von RESTCaptcha stehen optional auch Client-Bibliotheken f\u00fcr PHP und .NET zur Verf\u00fcgung:</p> <ul> <li>openpotato/restcaptcha-client.net: Offizielle RESTCaptcha API .NET-Client-Bibliothek.</li> <li>openpotato/restcaptcha-client.php: Offizielle RESTCaptcha API PHP-Client-Bibliothek.</li> </ul>"},{"location":"integration/#beispiele","title":"Beispiele","text":"<p>Die Quellcodes f\u00fcr unsere beiden Live-Demos (PHP-basiert und ASP.NET-basiert ) sind bestimmt auch ganz interessant. Sie befinden sich im GitHub-Repository von RESTCaptcha.</p>"},{"location":"libraries/","title":"Client-Bibliotheken","text":"<p>Die RESTCaptcha API zum Verifizieren der Token und Challenge-L\u00f6sungen kann direkt per HTTP/HTTPS-Aufruf konsumiert werden. Schicker ist jedoch, soweit vorhanden, die Nutzung einer Client-Bibliothek.</p> <p>Die folgenden Bibliotheken sind verf\u00fcgbar:</p>"},{"location":"libraries/#net","title":".NET","text":"<ul> <li>openpotato/restcaptcha-client.net: Offizielle RESTCaptcha API .NET-Client-Bibliothek.</li> </ul>"},{"location":"libraries/#php","title":"PHP","text":"<ul> <li>openpotato/restcaptcha-client.php: Offizielle RESTCaptcha API PHP-Client-Bibliothek.</li> </ul>"},{"location":"security/","title":"Zus\u00e4tzliche Ma\u00dfnahmen","text":"<p>Eine CAPTCHA-L\u00f6sung (egal welche) kann immer nur ein Baustein in der Absicherungsstrategie Deiner Webseite sein und sollte mit zus\u00e4tzlichen Ma\u00dfnahmen kombiniert werden. </p> <p>Hier ein paar Anregungen:</p> <ul> <li> <p>Content Security Policy (CSP): Eine Sicherheitsfunktion moderner Browser, mit der Du festlegen kannst, welche Inhalte (Skripte, Styles, Bilder, iFrames, etc.) auf Deiner Website geladen und ausgef\u00fchrt werden d\u00fcrfen. </p> <p>Ziel: Verhinderung von Cross-Site Scripting (XSS) und Dateninjektionen.</p> </li> <li> <p>Rate-Limiting: Ein Funktion, die daf\u00fcr sorgt, dass ein Client (z. B. ein Benutzer, ein Browser oder ein Bot) nicht zu viele Anfragen in zu kurzer Zeit an Deinen Server senden kann. </p> <p>Ziel: Verhinderung von DoS-Attacken. </p> </li> <li> <p>(Dynamisches) IP-Blacklisting: Eine Funktion, mit der Du bestimmte IP-Adressen oder IP-Bereiche blockieren kannst, um zu verhindern, dass sie auf Deinen Server zugreifen. Mit Werkeugen wie Fail2Ban kannst Du solche Listen dynamisch verwalten, in dem Du IP-Adressen erst dann blockierst, wenn sie ein bestimmtes Verhalten an den Tag legen (z.B. mehrfaches falsches Anmelden in kurzer Zeit). </p> <p>Ziel: Blockieren von Clients mit verd\u00e4chtigem Verhaltensmuster.</p> </li> <li> <p>TLS Hardening: Neben der selbstverst\u00e4ndlichen Tatsache, dass Deine Webseite unter HTTPS zu erreichen sein sollte, solltest Du auch daf\u00fcr sorgen, dass nur TLS 1.2 und TLS 1.3 angeboten und keine veralteten bzw. unsicheren kryptografischen Verfahren genutzt werden. </p> <p>Ziel: Sichere Verschl\u00fcssslung der Kommunikation</p> </li> <li> <p>HTTP Strict Transport Security (HSTS): Eine Funktion, die den Browser dazu zwingt, Deine Website ausschlie\u00dflich \u00fcber HTTPS aufzurufen und nicht mehr \u00fcber unsichere HTTP-Verbindungen. </p> <p>Ziel: Schutz vor dem ber\u00fchmten Man-in-the-Middle.</p> </li> </ul>"},{"location":"ubuntu/","title":"Unter Ubuntu","text":"<p>In diesem Kapitel beschreiben wir beispielhaft die Installation von RESTCaptcha unter Ubuntu Server 24.04 LTS mit nginx als Reverse-Proxy. </p>"},{"location":"ubuntu/#installation-nginx","title":"Installation nginx","text":"<p>\u00dcberpr\u00fcfe, ob Du nginx bereits installiert hast:</p> <pre><code>nginx -v\n</code></pre> <p>Sieht das Ergebnis wie folgt aus, musst Du nichts weiter machen und kannst gleich zum n\u00e4chsten Abschnitt \"Installation ASP.NET\" springen:</p> <pre><code>nginx version: nginx/1.28.0\n</code></pre> <p>Sollte stattdessen <code>Command 'nginx' not found</code> erscheinen, musst Du nginx noch installieren:</p> <pre><code>sudo apt update &amp;&amp; sudo apt install nginx\n</code></pre> <p>Zum Starten von nginx tippe folgendes ein:</p> <pre><code>sudo systemctl start nginx\n</code></pre> <p>F\u00fcr einen Autostart beim Booten Deines Servers tippe folgendes ein:</p> <pre><code>sudo systemctl enable nginx\n</code></pre> <p>Teste anschlie\u00dfend, ob Du lokal die Standardwebseite von nginx aufrufen kannst:</p> <pre><code>wget -S --spider localhost\n</code></pre> <p>nginx-Standardwebseite</p> <p>Die Standardwebseite von nginx wird f\u00fcr RESTCaptcha nicht ben\u00f6tigt. Du kannst und solltest sie deaktivieren:</p> <pre><code>sudo unlink /etc/nginx/sites-enabled/default\nsudo systemctl reload nginx\n</code></pre>"},{"location":"ubuntu/#installation-aspnet","title":"Installation ASP.NET","text":"<p>RESTCaptcha ben\u00f6tigt das ASP.NET-Framework als Abh\u00e4ngigkeit.</p> <p>Die Installation von ASP.NET Core 9 wird in der Microsoft-Dokumentation ausf\u00fchrlich beschrieben. Hier die Kurzfassung:</p> <p>Zun\u00e4chst musst Du das Paket-Repository hinzuf\u00fcgen:</p> <pre><code>sudo add-apt-repository ppa:dotnet/backports\n</code></pre> <p>Dann installierst Du die ASP.NET Core-Runtime:</p> <pre><code>sudo apt-get update &amp;&amp; sudo apt-get install -y apt-transport-https \nsudo apt-get update &amp;&amp; sudo apt-get install -y aspnetcore-runtime-9.0\n</code></pre>"},{"location":"ubuntu/#installation-restcaptcha","title":"Installation RESTCaptcha","text":""},{"location":"ubuntu/#binaries-kopieren","title":"Binaries kopieren","text":"<p>Lege einen neues Verzeichnis f\u00fcr RESTCaptcha (Beispiel: <code>/usr/share/restcaptcha</code>) an und kopiere die Binaries des aktuellen Release dort hinein. </p> <p>Der folgende Bash-One-Liner macht das f\u00fcr Dich:</p> <pre><code>curl -sL -H \"User-Agent: curl\" https://api.github.com/repos/openpotato/restcaptcha/releases/latest | jq -r '.assets[] | select(.name | endswith(\".zip\")) | .browser_download_url' | head -n1 | xargs -I{} bash -c 'tmp=$(mktemp /tmp/restcaptcha.XXXX.zip); curl -L -H \"User-Agent: curl\" -o \"$tmp\" \"{}\"; sudo mkdir -p /usr/share/restcaptcha; sudo unzip -o \"$tmp\" -d /usr/share/restcaptcha; rm \"$tmp\"'\n</code></pre> <p>Jetzt konfigurieren wir Eigent\u00fcmer und Zugriffsrechte f\u00fcr die Verzeichnisse:</p> <pre><code>sudo chown -R nginx:nginx /usr/share/restcaptcha\nsudo chmod -R u=rwX,g=rX,o= /usr/share/restcaptcha\n</code></pre> <p>Lege unter <code>/usr/share/restcaptcha</code> eine neue Datei <code>appsettings.Production.json</code> an:</p> <pre><code>{\n  \"Serilog\": {\n    \"Using\": [\n      \"Serilog.Sinks.Console\",\n      \"Serilog.Sinks.File\"\n    ],\n    \"MinimumLevel\": {\n      \"Default\": \"Information\",\n      \"Override\": {\n        \"Microsoft.AspNetCore\": \"Warning\",\n        \"Microsoft.AspNetCore.Hosting.Diagnostics\": \"Warning\",\n        \"Microsoft.AspNetCore.HttpLogging.HttpLoggingMiddleware\": \"Information\"\n      }\n    },\n    \"WriteTo\": [\n      { \"Name\": \"Console\" },\n      {\n        \"Name\": \"File\",\n        \"Args\": {\n          \"path\": \"/var/log/restcaptcha/log-.txt\",\n          \"rollingInterval\": \"Day\",\n          \"retainedFileCountLimit\": 14,\n          \"fileSizeLimitBytes\": 10000000,\n          \"rollOnFileSizeLimit\": true\n        }\n      }\n    ]\n  },\n  \"RestCaptcha\": {\n    \"Sites\": [\n      {\n        \"name\": \"Meine Site\",\n        \"description\": \"Meine Site, die RESTCaptcha nutzt\",\n        \"siteKey\": \"Mein-Site-Schl\u00fcssel\",\n        \"siteSecret\": \"AeyGWx3kQeyrDFCE5KDR\",\n        \"validHostNames\": []\n      }\n    ]\n  }\n}\n</code></pre> <p>F\u00fcr den API-Webservice m\u00fcssen wir eine Service-Datei anlegen:</p> <pre><code>sudo nano /etc/systemd/system/restcaptcha.service\n</code></pre> <p>Da kommt folgender Inhalt rein:</p> <pre><code>[Unit]\nDescription=RESTCaptcha Web Service\n\n[Service]\nWorkingDirectory=/usr/share/restcaptcha\nExecStart=/usr/bin/dotnet RestCaptcha.WebService.dll\nRestart=always\n# Restart service after 10 seconds if the dotnet service crashes:\nRestartSec=10\nKillSignal=SIGINT\nSyslogIdentifier=restcaptcha\nUser=nginx\nEnvironment=ASPNETCORE_ENVIRONMENT=Production\nEnvironment=DOTNET_PRINT_TELEMETRY_MESSAGE=false\nEnvironment=ASPNETCORE_URLS=http://localhost:5030\n\n[Install]\nWantedBy=multi-user.target\n</code></pre> <p>Anschlie\u00dfend wird der API-Webservice gestartet</p> <pre><code>sudo systemctl daemon-reload\nsudo systemctl enable restcaptcha.service\nsudo systemctl start restcaptcha.service\n</code></pre> <p>Die folgende \u00dcberpr\u00fcfung sollte erfolgreich sein:</p> <pre><code>sudo systemctl status restcaptcha.service\n</code></pre>"},{"location":"ubuntu/#nginx-als-reverse-proxy","title":"Nginx als Reverse Proxy","text":"<p>Erstelle eine neue Konfigurationsdatei f\u00fcr Nginx und f\u00fcge folgenden Inhalt hinzu:</p> <pre><code>server {\n    server_name  localhost;\n    listen       127.0.0.1:8080;\n    listen       [::1]:8080;\n    root         /usr/share/restcaptcha.webservice;\n\n    # Proxy request to Kestrel\n    location / {\n        proxy_pass         http://127.0.0.1:5030;\n        proxy_http_version 1.1;\n        proxy_set_header   Upgrade $http_upgrade;\n        proxy_set_header   Connection keep-alive;\n        proxy_set_header   Host $host;\n        proxy_cache_bypass $http_upgrade;\n        proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header   X-Forwarded-Proto $scheme;\n    }\n\n    # redirect server error pages to the static page /50x.html\n    error_page 500 502 504  /50x.html;\n    location = /50x.html {\n        root /usr/share/nginx/html;\n    }\n}\n\nserver {\n    server_name  captcha.beispiel.de;\n    listen       443 ssl; \n    root         /usr/share/restcaptcha.webservice;\n\n    # Proxy request to Kestrel\n    location / {\n        proxy_pass         http://127.0.0.1:5030;\n        proxy_http_version 1.1;\n        proxy_set_header   Upgrade $http_upgrade;\n        proxy_set_header   Connection keep-alive;\n        proxy_set_header   Host $host;\n        proxy_cache_bypass $http_upgrade;\n        proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header   X-Forwarded-Proto $scheme;\n    }\n\n    # redirect server error pages to the static page /50x.html\n    error_page 500 502 504  /50x.html;\n    location = /50x.html {\n        root /usr/share/nginx/html;\n    }\n\n    # Turn on http2 protocol\n    http2 on;\n}\n</code></pre> <p>Starte anschlie\u00dfend nginx neu:</p> <pre><code>sudo systemctl restart nginx\n</code></pre> <p>Der lokale folgende Test ruft den Health-Endpunkt von RESTCaptcha auf und sollte erfolgreich sein:</p> <pre><code>Invoke-WebRequest -Uri \"http://localhost:8080/health\" -UseBasicParsing\n</code></pre> <p>F\u00fcr einen \u00f6ffentlichen Test fehlt noch ein TLS-Zertifikat f\u00fcr unsere https-Bindung. Eine gute M\u00f6glichkeit ist die Nutzung von Let's Encrypt zum Erstellen von kostenlosne TLS-Zertifikaten. </p> <p>Du musst daf\u00fcr einen ACME-Client installieren. Einer der besten Clients f\u00fcr Linux ist Certbot. Installiere und starte Certbot. Sind alle Fragen beantwortet, kommuniziert Certbot mit Let\u2019s Encrypt, erfragt ein TLS-Zertifikat f\u00fcr die Dom\u00e4ne <code>captcha.beispiel.de</code> und f\u00fchrt die notwendigen \u00c4nderungen in Deiner nginx-Konfigurationsdatei durch.</p> <p>Ein Test in einem Web-Browser mit <code>https://captcha.beispiel.de/health</code> sollte jetzt erfolgreich funktionieren.</p> <p>Let\u2019s Encrypt und nginx</p> <p>Eine ausf\u00fchrliche Einf\u00fchrung in das Thema findest Du in folgendem Blog-Post: HTTPS unter nginx/Ubuntu.</p>"},{"location":"widget/","title":"Widget","text":"<p>Diese Referenz dokumentiert alle wichtigen \u00f6ffentlichen Klassen, Eigenschaften und Methoden, sowie die verf\u00fcgbaren HTML-Attribute (<code>data-*</code>) und Ereignisse der <code>restcaptcha.js</code>-Bibliothek.</p>"},{"location":"widget/#uberblick","title":"\u00dcberblick","text":"<p>Die RESTCaptcha-JavaScript-Bibliothek stellt den erforderlichen JavaScript-Code f\u00fcr die clientseitige Integration von RESTCaptcha in eigene Webseiten bereit. </p> <p>Sie hat zwei Auspr\u00e4gungen:</p> <ul> <li><code>restcaptcha.js</code>: Die Originalversion.</li> <li><code>restcaptcha.min.js</code>: Minimierte (minified) Version, bei der alle unn\u00f6tigen Zeichen entfernt wurden, um die Dateigr\u00f6\u00dfe zu verkleinern und die Ladezeiten im Browser zu verbessern.</li> </ul> <p>Die Bibliothek besteht aus zwei Hauptkomponenten:</p> <ol> <li> <p><code>HeadlessRestCaptcha</code>: Ein reiner JavaScript-Client ohne Benutzeroberfl\u00e4che (headless). Er kommuniziert direkt mit der RESTCaptcha-API, l\u00f6st die kryptografische Challenge und gibt das Ergebnis \u00fcber Ereignisse oder Callbacks zur\u00fcck. Diese Variante eignet sich f\u00fcr Integrationen in eigene UI- oder Framework-L\u00f6sungen.</p> </li> <li> <p><code>RestCaptcha</code>: Ein auf dem Headless-Client basierendes, visuelles Widget, das automatisch eine einfache Benutzeroberfl\u00e4che im Browser rendert. Es kann via HTML-Attribute frei konfiguriert werden, unterst\u00fctzt mehrere Sprachen und Modi (interaktiv, automatisch oder unsichtbar).</p> </li> </ol>"},{"location":"widget/#headlessrestcaptcha","title":"HeadlessRestCaptcha","text":"<p>Ein UI-loser Client, der direkt mit der RESTCaptcha-API kommuniziert, ein Proof-of-Work l\u00f6st und \u00fcber Ereignisse (Callbacks) gesteuert wird.</p>"},{"location":"widget/#konstruktor","title":"Konstruktor","text":"<pre><code>new HeadlessRestCaptcha(apiBaseUrl, siteKey, language)\n</code></pre> <p>Die Parameter bedeuten:</p> <code>apiBaseUrl</code> <p>Basis-URL des RESTCaptcha-Backends (Pflichtfeld)</p> <code>siteKey</code> <p>Der RESTCaptcha-Sitekey (Pflichtfeld)</p> <code>language</code> <p>Sprachcode (z. B. <code>\"de\"</code>), automatische Erkennung, wenn leer</p>"},{"location":"widget/#eigenschaften","title":"Eigenschaften","text":"<code>HeadlessRestCaptcha.language</code> <p>Effektiver Sprachcode</p>"},{"location":"widget/#ereignisse","title":"Ereignisse","text":"<code>HeadlessRestCaptcha.onStarted</code> <p>Eine Funktion, die aufgerufen wird, wenn das L\u00f6sen startet</p> <code>HeadlessRestCaptcha.onSolved</code> <p>Eine Funktion, die aufgerufen wird, , wenn das CAPTCHA erfolgreich gel\u00f6st wurde</p> <code>HeadlessRestCaptcha.onFailed</code> <p>Eine Funktion, die bei Fehlschl\u00e4gen aufgerufen (z. B. ung\u00fcltiger Token, zu viele Versuche) wird.</p> <code>HeadlessRestCaptcha.onError</code> <p>Eine Funktion, die bei unerwarteten Fehlern aufgerufen wird.</p> <code>HeadlessRestCaptcha.onReset</code> <p>Eine Funktion, die nach einem Reset aufgerufen wird.</p>"},{"location":"widget/#methoden","title":"Methoden","text":"<code>HeadlessRestCaptcha.solve()</code> <p>Startet die Kommunikation mit dem Backend, l\u00e4dt eine Challenge, l\u00f6st den Proof-of-Work (SHA-256/384/512) und ruft bei Erfolg <code>onSolved(token, solution)</code> auf.</p> <code>HeadlessRestCaptcha.reset(token)</code> <p>Invalidiert einen zuvor erhaltenen Token.</p> <code>HeadlessRestCaptcha.isHeadless()</code>: <p>\u00dcberpr\u00fcft, ob der aufrufende Browser h\u00f6chstwahrscheinlich headless oder automatisiert l\u00e4uft.</p>"},{"location":"widget/#restcaptcha","title":"RestCaptcha","text":"<p>Das sichtbare CAPTCHA-Widget, das automatisch HTML rendert und mit dem bereits integrierten Headless-Client interagiert.</p>"},{"location":"widget/#konstruktor_1","title":"Konstruktor","text":"<pre><code>new RestCaptcha(widgetId = \"restcaptcha-widget\")\n</code></pre> <p>Der Parameter bedeutet:</p> <code>widgetId</code> <p>Die ID des Widgets im Browser-DOM (Pflichtfeld)</p>"},{"location":"widget/#restcaptchaproblemdetails","title":"RestCaptchaProblemDetails","text":"<p>Implementiert den Standard RFC 9457 Problem Details f\u00fcr strukturierte API-Fehler. Erweitert die JavaScript-<code>Error</code>-Klasse.</p>"},{"location":"widget/#konstruktor_2","title":"Konstruktor","text":"<pre><code>new RestCaptchaProblemDetails({\n  type = 'about:blank',\n  title = 'Unknown error',\n  status = 0,\n  detail = null,\n  instance = null,\n  traceId = null,\n  errors = null\n} = {})\n</code></pre> <p>Der Paremeter ist ein anonymes Objekt mit den passenden Eigschaften (siehe n\u00e4chsten Abschnitt \"Eigenschaften\").</p>"},{"location":"widget/#eigenschaften_1","title":"Eigenschaften","text":"<code>RestCaptchaProblemDetails.type</code> <p>URI, die den Fehlertyp beschreibt</p> <code>RestCaptchaProblemDetails.title</code> <p>Kurze, lesbare Zusammenfassung</p> <code>RestCaptchaProblemDetails.status</code> <p>HTTP-Statuscode</p> <code>RestCaptchaProblemDetails.detail</code> <p>Detaillierte Fehlerbeschreibung</p> <code>RestCaptchaProblemDetails.instance</code> <p>URI dieser Fehlersituation</p> <code>RestCaptchaProblemDetails.traceId</code> <p>Serverseitige Diagnose-ID</p> <code>RestCaptchaProblemDetails.errors</code> <p>Feldbezogene Validierungsfehler (optional)</p>"},{"location":"widget/#instanzmethoden","title":"Instanzmethoden","text":"<code>RestCaptchaProblemDetails.toString()</code> <p>Gibt den Fehler als <code>[Status] Titel: Detail</code> zur\u00fcck.</p>"},{"location":"widget/#statische-methoden","title":"Statische Methoden","text":"<code>RestCaptchaProblemDetails.fromResponse(response, json)</code> <p>Erstellt eine <code>RestCaptchaProblemDetails</code>-Instanz aus einer <code>fetch()</code>-Response und dem zugeh\u00f6rigen JSON-Body.</p>"},{"location":"widget/#widget-data-attribute","title":"Widget <code>data-*</code> Attribute","text":"<p>Diese HTML-Attribute steuern das Verhalten und das Design des Widgets.</p>"},{"location":"widget/#grundkonfiguration","title":"Grundkonfiguration","text":"<code>data-api-baseurl</code> <p>Basis-URL der RESTCaptcha-API (Pflichtfeld)</p> <code>data-sitekey</code> <p>\u00d6ffentlicher Site-Schl\u00fcssel (Pflichtfeld)</p> <code>data-widget-language</code> <p>Sprachcode (<code>de</code>, <code>en</code>, <code>es</code>, <code>fr</code>, <code>it</code>, <code>pt</code>). Standardm\u00e4\u00dfig wird versucht, die Sprache automatisch vom Browser zu ermitteln, mit Fallback zu <code>en</code>.</p> <code>data-widget-mode</code> <p>Modus. M\u00f6gliche Werte sind <code>interactive</code> (Standard), <code>auto</code> oder <code>invisible</code>.</p>"},{"location":"widget/#callback-attribute","title":"Callback-Attribute","text":"<code>data-callback-started</code> &gt; <code>() =&gt; void</code> <p>Callback, nachdem die Challenge auf dem Client gestartet wurde.</p> <code>data-callback-solved</code>  &gt; <code>(token, solution) =&gt; void</code> <p>Callback, nachdem eine erfolgreiche Verifikation gemeldet wurde.</p> <code>data-callback-failed</code> &gt; <code>(message) =&gt; void</code> <p>Callback, nachdem eine ung\u00fcltige Verifikation gemeldet wurde.</p> <code>data-callback-error</code> &gt; <code>(error) =&gt; void</code> <p>Callback, nachdem ein API-Fehler gemeldet wurde.</p> <code>data-callback-reset</code> &gt; <code>(token) =&gt; void</code> <p>Callback, nachdem der Reset-Link gedr\u00fcckt wurde.</p> <p>Beispiel:</p> <pre><code>&lt;script&gt;\n  function onCaptchaSolved(token, solution) {\n    console.log(\"Gel\u00f6st:\", token, solution);\n  }\n&lt;/script&gt;\n\n&lt;div id=\"restcaptcha-widget\"\n     data-api-baseurl=\"https://captcha.beispiel.de/v1/\"\n     data-sitekey=\"&lt;Mein-Site-Schl\u00fcssel&gt;\"\n     data-widget-language=\"de\"\n     data-callback-solved=\"onCaptchaSolved\"&gt;\n&lt;/div&gt;\n</code></pre>"},{"location":"widget/#css-klassen-attribute","title":"CSS-Klassen-Attribute","text":"<p>Das Widget erlaubt vollst\u00e4ndige Kontrolle \u00fcber CSS-Klassen durch <code>data-widget-css-*</code> Attribute.</p> <p>Einige Attribute sind spezifisch f\u00fcr bestimmte Visualisierungen (z.B. <code>data-widget-css-interactive</code>), andere wiederum wiederum werden bei allen Visualisierungen eingestzt (z.B. <code>data-widget-css-footer</code>). In Kombination mit den <code>id</code>-Werten der HTML-Knoten ist jedoch maximale Flexibilt\u00e4t m\u00f6glich.</p> <p>Beispiel f\u00fcr Bootstrap 5:</p> <pre><code>&lt;div \n  id=\"restcaptcha-widget\" \n  data-api-baseurl=\"https://captcha.beispiel.de/v1/\"\n  data-sitekey=\"&lt;Mein-Site-Schl\u00fcssel&gt;\"\n  data-widget-language=\"de\"\n  data-widget-mode=\"interactive\" \n  data-widget-css-interactive=\"alert alert-light\"\n  data-widget-css-interactive-body=\"form-check\"\n  data-widget-css-interactive-checkbox=\"form-check-input\"\n  data-widget-css-interactive-checklabel=\"form-check-label\"\n  data-widget-css-solving=\"alert alert-light\"\n  data-widget-css-solving-body=\"d-flex align-items-center\"\n  data-widget-css-solving-animation=\"spinner-border spinner-border-sm me-3\"\n  data-widget-css-solved=\"alert alert-success\"\n  data-widget-css-solved-body=\"d-flex align-items-center\"\n  data-widget-css-solved-icon=\"me-2\"\n  data-widget-css-solved-text=\"fw-bold\"\n  data-widget-css-failed=\"alert alert-warning\"\n  data-widget-css-failed-body=\"d-flex align-items-center\"\n  data-widget-css-failed-icon=\"me-2\"\n  data-widget-css-error=\"alert alert-danger\"\n  data-widget-css-error-body=\"d-flex align-items-center\"\n  data-widget-css-error-icon=\"me-2\"\n  data-widget-css-footer=\"d-flex justify-content-end align-items-center mt-3 mb-1 gap-2\"\n  data-widget-css-links=\"d-flex gap-2\"\n  data-widget-css-link-external=\"link-secondary link-offset-1\"\n  data-widget-css-link-reset=\"link-offset-1\"\n  &gt;\n&lt;/div&gt;\n</code></pre> <p>Es folgen alle f\u00fcnf m\u00f6glichen Visualisierungen von RESTCaptcha in abstrahierter Form.</p> <p>UI zur Visualisierung des interaktiven Modus:</p> <pre><code>&lt;div id=\"${widgetId}-interactive\" class=\"${data-widget-css-interactive}\" role=\"alert\"&gt;\n    &lt;div id=\"${widgetId}-interactive-body\" class=\"${data-widget-css-interactiveBody}\"&gt;\n        &lt;input id=\"${widgetId}-interactive-checkbox\" type=\"checkbox\" class=\"${data-widget-css-interactiveCheckBox}\"&gt;\n        &lt;label id=\"${widgetId}-interactive-checklabel\" for=\"${widgetId}-interactive-checkbox\" class=\"${data-widget-css-interactiveCheckLabel}\"&gt;\n            // Text\n        &lt;/label&gt;\n    &lt;/div&gt;  \n    &lt;div id=\"${widgetId}-footer\" class=\"${data-widget-css-footer}\"&gt;\n        &lt;div id=\"${widgetId}-logo\" class=\"${data-widget-css-logo}\" role=\"img\" aria-hidden=\"true\"&gt;\n            // RESTCaptcha Logo\n        &lt;/div&gt;\n        &lt;small id=\"${widgetId}-links\" class=\"${data-widget-css-links}\"&gt;\n            // External Links\n        &lt;/small&gt;\n    &lt;/div&gt;\n&lt;/div&gt;\n</code></pre> <p>UI zur Visualisierung des L\u00f6sungsprozesses:</p> <pre><code>&lt;div id=\"${widgetId}-solving\" class=\"${data-widget-css-solving}\" role=\"alert\"&gt;\n    &lt;div id=\"${widgetId}-solving-body\" class=\"${data-widget-css-solvingBody}\"&gt;\n        &lt;div id=\"${widgetId}-solving-animation\" class=\"${data-widget-css-solvingAnimation}\" role=\"status\" aria-hidden=\"true\"&gt;&lt;/div&gt;\n        &lt;div id=\"${widgetId}-solving-text\" class=\"${data-widget-css-solvingText}\"&gt;\n            // Text\n        &lt;/div&gt;\n    &lt;/div&gt;\n    &lt;div id=\"${widgetId}-footer\" class=\"${data-widget-css-footer}\"&gt;\n        &lt;div id=\"${widgetId}-logo\" class=\"${data-widget-css-logo}\" role=\"img\" aria-hidden=\"true\"&gt;\n            // RESTCaptcha Logo\n        &lt;/div&gt;\n        &lt;small id=\"${widgetId}-links\" class=\"${data-widget-css-links}\"&gt;\n            // External Links\n        &lt;/small&gt;\n    &lt;/div&gt;\n&lt;/div&gt;\n</code></pre> <p>UI zur Visualisierung der erfolgreich validierten Challenge-L\u00f6sung:</p> <pre><code>&lt;div id=\"${widgetId}-success\" class=\"${data-widget-css-solved}\" role=\"alert\"&gt;\n    &lt;div id=\"${widgetId}-success-body\" class=\"${data-widget-css-solvedBody}\"&gt;\n        &lt;div id=\"${widgetId}-success-icon\" class=\"${data-widget-css-solvedIcon}\"&gt;\n            // Icon\n        &lt;/div&gt;\n        &lt;div id=\"${widgetId}-success-text\" class=\"${data-widget-css-solvedText}\"&gt;\n            // Text\n        &lt;/div&gt;\n    &lt;/div&gt;\n    &lt;div id=\"${widgetId}-footer\" class=\"${data-widget-css-footer}\"&gt;\n        &lt;div id=\"${widgetId}-logo\" class=\"${data-widget-css-logo}\" role=\"img\" aria-hidden=\"true\"&gt;\n            // RESTCaptcha Logo\n        &lt;/div&gt;\n        &lt;small id=\"${widgetId}-links\" class=\"${data-widget-css-links}\"&gt;\n            // External Links\n        &lt;/small&gt;\n    &lt;/div&gt;\n&lt;/div&gt;\n</code></pre> <p>UI zur Visualisierung der nicht erfolgreich gel\u00f6sten Challenge-L\u00f6sung:</p> <pre><code>&lt;div id=\"${widgetId}-failed\" class=\"${data-widget-css-failed}\" role=\"alert\"&gt;\n    &lt;div id=\"${widgetId}-failed-body\" class=\"${data-widget-css-failedBody}\"&gt;\n        &lt;div id=\"${widgetId}-failed-icon\" class=\"${data-widget-css-failedIcon}\"&gt;\n            // Icon\n        &lt;/div&gt;\n        &lt;div id=\"${widgetId}-failed-text\" class=\"${data-widget-css-failedText}\"&gt;\n            // Error message\n        &lt;/div&gt;\n    &lt;/div&gt;\n    &lt;div id=\"${widgetId}-footer\" class=\"${data-widget-css-footer}\"&gt;\n        &lt;div id=\"${widgetId}-logo\" class=\"${data-widget-css-logo}\" role=\"img\" aria-hidden=\"true\"&gt;\n            // RESTCaptcha Logo\n        &lt;/div&gt;\n        &lt;small id=\"${widgetId}-links\" class=\"${data-widget-css-links}\"&gt;\n            // External Links\n        &lt;/small&gt;\n    &lt;/div&gt;\n&lt;/div&gt;\n</code></pre> <p>UI zur Visualisierung von API-Fehlern:</p> <pre><code>&lt;div id=\"${widgetId}-error\" class=\"${data-widget-css-error}\" role=\"alert\"&gt;\n    &lt;div id=\"${widgetId}-error-body\" class=\"${data-widget-css-errorBody}\"&gt;\n        &lt;div id=\"${widgetId}-error-icon\" class=\"${data-widget-css-errorIcon}\"&gt;\n            // Icon\n        &lt;/div&gt;\n        &lt;div id=\"restcaptcha-error-text\" class=\"${data-widget-css-errorText}\"&gt;\n            // Error message\n        &lt;/div&gt;\n    &lt;/div&gt;\n    &lt;div id=\"${widgetId}-footer\" class=\"${data-widget-css-footer}\"&gt;\n        &lt;div id=\"${widgetId}-logo\" class=\"${data-widget-css-logo}\" role=\"img\" aria-hidden=\"true\"&gt;\n            // RESTCaptcha Logo\n        &lt;/div&gt;\n        &lt;small id=\"${widgetId}-links\" class=\"${data-widget-css-links}\"&gt;\n            // External Links\n        &lt;/small&gt;\n    &lt;/div&gt;\n&lt;/div&gt;\n</code></pre>"},{"location":"widget/#externe-links","title":"Externe Links","text":"<p>Bis zu 8 zus\u00e4tzliche Links k\u00f6nnen angezeigt werden, z. B. f\u00fcr Verweise auf Datenschutz oder Impressum.</p> <p>Beispiel:</p> <pre><code>&lt;div id=\"restcaptcha-widget\"\n  data-widget-external-link1-href=\"https://www.beispiel.de/restcaptcha\"\n  data-widget-external-link1-text=\"\u00dcber RESTCaptcha\"\n  data-widget-external-link2-href=\"https://www.beispiel.de/datenschutz\"\n  data-widget-external-link2-text=\"Datenschutz\"&gt;\n&lt;/div&gt;\n</code></pre>"},{"location":"widget/#events-callbacks","title":"Events &amp; Callbacks","text":"<p>Es gibt zwei Ans\u00e4tze, um Ereignisse zu behandeln: Programmatisch (Headless) oder deklarativ (via HTML-Attribute)</p> <p>Programmatisch:</p> <pre><code>const h = new HeadlessRestCaptcha(api, siteKey, 'de');\n\nh.onStarted = () =&gt; console.log(\"Gestartet\");\nh.onSolved = (token, solution) =&gt; console.log(\"Gel\u00f6st:\", token, solution);\nh.onFailed = msg =&gt; alert(msg);\nh.onError = e =&gt; console.error(e);\nh.onReset = () =&gt; console.log(\"Zur\u00fcckgesetzt\");\n\nh.solve();\n</code></pre> <p>Deklarativ:</p> <pre><code>&lt;script&gt;\n  function captchaStarted() { console.log(\"Gestartet\"); }\n  function captchaSolved(token, solution) { console.log(\"Gel\u00f6st:\", token, solution); }\n  function captchaFailed(msg) { alert(msg); }\n&lt;/script&gt;\n\n&lt;div id=\"restcaptcha-widget\"\n  data-api-baseurl=\"https://captcha.beispiel.de/v1/\"\n  data-sitekey=\"&lt;Mein-Site-Schl\u00fcssel&gt;\"\n  data-callback-started=\"captchaStarted\"\n  data-callback-solved=\"captchaSolved\"\n  data-callback-failed=\"captchaFailed\"&gt;\n  ...\n&lt;/div&gt;\n</code></pre>"},{"location":"widget/#automatische-initialisierung","title":"Automatische Initialisierung","text":"<p>Beim Laden des Dokuments (<code>DOMContentLoaded</code>) sucht das Skript automatisch nach einem Element mit der ID <code>restcaptcha-widget</code> und initialisiert es mit:</p> <pre><code>new RestCaptcha(\"restcaptcha-widget\");\n</code></pre> <p>Fehlt das Element, passiert nichts weiter.</p>"},{"location":"windows/","title":"Unter Windows","text":"<p>In diesem Kapitel beschreiben wir beispielhaft die Installation von RESTCaptcha unter Windows Server 2025 mit IIS 10 als Hosting-Umgebung. Wir arbeiten dabei ausschlie\u00dflich mit PowerShell. </p>"},{"location":"windows/#installation-iis","title":"Installation IIS","text":"<p>\u00d6ffne die PowerShell als Administrator und \u00fcberpr\u00fcfe, ob IIS 10 bereits installiert ist:</p> <pre><code>Get-WindowsFeature -Name Web-Server, Web-Scripting-Tools\n</code></pre> <p>Sieht das Ergebnis wie folgt aus, musst Du nichts weiter machen und kannst gleich zum n\u00e4chsten Abschnitt \"Installation ASP.NET\" springen:</p> <pre><code>Display Name                                            Name                       Install State\n------------                                            ----                       -------------\n[X] Web Server (IIS)                                    Web-Server                     Installed\n        [X] IIS Management Scripts and Tools            Web-Scripting-Tools            Installed\n</code></pre> <p>Sollte da irgendwo ein Kreuzer fehlen, musst Du die Windows-Features nachinstallieren:</p> <pre><code>Install-WindowsFeature -Name Web-Server, Web-Scripting-Tools\n</code></pre> <p>Teste anschlie\u00dfend, ob Du lokal die Standardwebseite von IIS 10 aufrufen kannst:</p> <pre><code>Invoke-WebRequest -Uri \"http://localhost\" -UseBasicParsing\n</code></pre> <p>IIS-Standardwebseite</p> <p>Die Standardwebseite von IIS 10 wird f\u00fcr RESTCaptcha nicht ben\u00f6tigt. Du kannst und solltest sie deaktivieren:</p> <pre><code>Import-Module WebAdministration\nStop-Website -Name \"Default Web Site\"\nSet-ItemProperty \"IIS:\\Sites\\Default Web Site\" serverAutoStart False\n</code></pre>"},{"location":"windows/#installation-aspnet","title":"Installation ASP.NET","text":"<p>RESTCaptcha ben\u00f6tigt das ASP.NET-Framework als Abh\u00e4ngigkeit.</p> <p>\u00d6ffne die PowerShell als Administrator und tippe folgenden Befehl ein, um das ASP.NET Core 9.0 Runtime - Windows Hosting Bundle zu installieren:</p> <pre><code>winget install --id=Microsoft.DotNet.HostingBundle.9 -e --accept-package-agreements --accept-source-agreements\n</code></pre>"},{"location":"windows/#installation-restcaptcha","title":"Installation RESTCaptcha","text":""},{"location":"windows/#binaries-kopieren","title":"Binaries kopieren","text":"<p>Lege einen neuen Ordner f\u00fcr RESTCaptcha (Beispiel: <code>C:\\Sites\\RestCaptcha</code>) an und kopiere die Binaries des aktuellen Release dort hinein. Der folgende PowerShell-One-Liner macht das f\u00fcr Dich:</p> <pre><code>$r=Invoke-RestMethod \"https://api.github.com/repos/openpotato/restcaptcha/releases/latest\" -Headers @{ \"User-Agent\"=\"PS\" };$a=$r.assets|?{ $_.name -like \"*.zip\"}|select -f 1;$zip=\"$env:TEMP\\$($a.name)\";Invoke-WebRequest $a.browser_download_url -OutFile $zip -Headers @{ \"User-Agent\"=\"PS\" };Expand-Archive $zip -DestinationPath \"C:\\Sites\\RestCaptcha\" -Force;Remove-Item $zip\n</code></pre> <p>Kopiere in diesem Ordner die Datei <code>appsettings.json</code> und nenne sie <code>appsettings.Production.json</code>:</p> <pre><code>Copy-Item C:\\Sites\\RestCaptcha\\appsettings.json C:\\Sites\\RestCaptcha\\appsettings.Production.json\n</code></pre> <p>\u00c4ndere den Inhalt von <code>appsettings.Production.json</code> wie folgt ab:</p> <pre><code>{\n  \"Serilog\": {\n    \"Using\": [\n      \"Serilog.Sinks.Console\",\n      \"Serilog.Sinks.File\"\n    ],\n    \"MinimumLevel\": {\n      \"Default\": \"Information\",\n      \"Override\": {\n        \"Microsoft.AspNetCore\": \"Warning\",\n        \"Microsoft.AspNetCore.Hosting.Diagnostics\": \"Warning\",\n        \"Microsoft.AspNetCore.HttpLogging.HttpLoggingMiddleware\": \"Information\"\n      }\n    },\n    \"WriteTo\": [\n      { \"Name\": \"Console\" },\n      {\n        \"Name\": \"File\",\n        \"Args\": {\n          \"path\": \"c:\\\\Sites\\\\RestCaptcha\\\\logs\\\\log-.txt\",\n          \"rollingInterval\": \"Day\",\n          \"retainedFileCountLimit\": 7,\n          \"fileSizeLimitBytes\": 10000000,\n          \"rollOnFileSizeLimit\": true\n        }\n      }\n    ]\n  },\n  \"RestCaptcha\": {\n    \"Sites\": [\n      {\n        \"name\": \"Meine Site\",\n        \"description\": \"Meine Site, die RESTCaptcha nutzt\",\n        \"siteKey\": \"Mein-Site-Schl\u00fcssel\",\n        \"siteSecret\": \"AeyGWx3kQeyrDFCE5KDR\",\n        \"validHostNames\": []\n      }\n    ]\n  }\n}\n</code></pre>"},{"location":"windows/#eine-neue-iis-site-anlegen","title":"Eine neue IIS Site anlegen","text":"<p>Zun\u00e4chst laden wir das IISS Management Module in unsere PowerShell-Session:</p> <pre><code>Import-Module WebAdministration\n</code></pre> <p>Dann erstellen wir einen passenden IIS App Pool f\u00fcr unseren ASP.NET-Dienst und konfigurieren ihn:</p> <pre><code>New-WebAppPool -Name \"AspNetCorePool\"\nSet-ItemProperty \"IIS:\\AppPools\\AspNetCorePool\" -Name managedRuntimeVersion -Value \"\"\nSet-ItemProperty \"IIS:\\AppPools\\AspNetCorePool\" -Name enable32BitAppOnWin64 -Value False\n</code></pre> <p>Dann erstellen wir eine neue IIS Site, die auf unseren RESTCaptcha-Ordner <code>C:\\Sites\\RestCaptcha</code> verweist:</p> <pre><code>New-Item \"IIS:\\Sites\\RestCaptcha\" `\n   -bindings @(\n     @{protocol=\"http\";  bindingInformation=\"*:8080:\"},\n     @{protocol=\"https\"; bindingInformation=\"*:443:captcha.beispiel.de\"}\n   ) `\n   -physicalPath \"C:\\Sites\\RestCaptcha\"\nSet-ItemProperty \"IIS:\\Sites\\RestCaptcha\" -Name applicationPool -Value \"AspNetCorePool\"\n</code></pre> <p>Wir haben jetzt zwei Bindungen, eine lokale http-Bindung auf Port 8080 und eine \u00f6ffentliche https-Bindung auf Port 443.</p> <p>Lege im Ordner <code>C:\\Sites\\RestCaptcha</code> eine neue Datei mit Namen <code>web.config</code> an und kopiere folgenden XML-Code hinein:</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n&lt;configuration&gt;\n  &lt;system.webServer&gt;\n    &lt;handlers&gt;\n      &lt;add name=\"aspNetCore\" path=\"*\" verb=\"*\" modules=\"AspNetCoreModuleV2\" resourceType=\"Unspecified\" /&gt;\n    &lt;/handlers&gt;\n    &lt;aspNetCore processPath=\"dotnet\"\n                arguments=\".\\RestCaptcha.WebService.dll\"\n                stdoutLogEnabled=\"false\"\n                stdoutLogFile=\".\\logs\\stdout\"\n                hostingModel=\"inprocess\"&gt;\n      &lt;environmentVariables&gt;\n        &lt;environmentVariable name=\"ASPNETCORE_ENVIRONMENT\" value=\"Production\" /&gt;\n      &lt;/environmentVariables&gt;\n    &lt;/aspNetCore&gt;\n  &lt;/system.webServer&gt;\n&lt;/configuration&gt;\n</code></pre> <p>Die Datei web.config konfiguriert das Hosting von RESTCaptcha als ASP.NET-Applikation, also die Art und Weise, wie einkommende Anfragen an RESTCaptcha weitergeleitet werden. In unserem Fall l\u00e4uft RESTCaptcha innerhalb des IIS-Arbeitsprozesses (in-process hosting model).</p> <p>Wir sind mit der Basiskonfiguration fertig. Starte Deine IIS-Site neu:</p> <pre><code>Restart-WebAppPool \"AspNetCorePool\"; \nRestart-WebItem \"IIS:\\Sites\\RestCaptcha\"\n</code></pre> <p>Der folgende lokale Test ruft den Health-Endpunkt von RESTCaptcha auf und sollte erfolgreich sein:</p> <pre><code>Invoke-WebRequest -Uri \"http://localhost:8080/health\" -UseBasicParsing\n</code></pre> <p>F\u00fcr einen \u00f6ffentlichen Test fehlt noch ein TLS-Zertifikat f\u00fcr unsere https-Bindung. Eine gute M\u00f6glichkeit ist die Nutzung von Let's Encrypt zum Erstellen von kostenlosne TLS-Zertifikaten. </p> <p>Du musst daf\u00fcr einen ACME-Client installieren. Einer der besten Clients f\u00fcr Windows ist simple-acme. Installiere ihn, starte die Kommandozeilenanwendung. Sind alle Fragen beantwortet, kommuniziert simple-acme mit Let\u2019s Encrypt und erfragt ein TLS-Zertifikat f\u00fcr die Dom\u00e4ne <code>captcha.beispiel.de</code>.</p> <p>Ein Test in einem Web-Browser mit <code>https://captcha.beispiel.de/health</code> sollte jetzt erfolgreich funktionieren.</p> <p>Let\u2019s Encrypt und IIS 10</p> <p>Eine ausf\u00fchrliche Einf\u00fchrung in das Thema findest Du in folgendem Blog-Post: HTTPS unter IIS 10.</p>"}]}